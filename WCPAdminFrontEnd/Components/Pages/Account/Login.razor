@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using WCPShared.Models
@using WCPShared.Models.Entities.AuthModels
@inject NavigationManager NavigationManager

<div class="">
    <div class="grid justify-center gap-2 pt-4 pb-4">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm" class="border-1 border-gray-400 p-4 rounded-lg">
            <DataAnnotationsValidator />
            <div class="font-semibold">
                Login
            </div>
            <div>
                <label>User Name</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Email" />
            </div>
            <div>
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div>
                <span class="text-red-600">@errorMessage</span>
            </div>
            <div class="grid mt-2">
                <button type="submit" class="btn bg-red-500 text-white">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public UserDto Model { get; set; } = new();
    private string? errorMessage;

    private async Task Authenticate()
    {
        if (String.IsNullOrEmpty(Model.Email) || String.IsNullOrEmpty(Model.Password))
        {
            errorMessage = "Invalid username or password";
            return;
        }

        var user = new
        {
            Email = Model.Email,
            Role = "Admin"
        };

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, user.Email),
            new Claim(ClaimTypes.Role, user.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/");
    }
}