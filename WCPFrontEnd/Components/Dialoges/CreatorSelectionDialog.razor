@using WCPAdminFrontEnd.Services
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Models.Views
@using WCPShared.Services.EntityFramework
@using WCPFrontEnd.Components.Shared
@inject OrderService OrderService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @Project.ProjectName - Creators
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Row="true">
            <MudTextField Value="@Project.Id.ToString()" Label="Projekt ID" ReadOnly="true" />
            <MudTextField Value="@Project.ProjectName" Label="Projektnavn" ReadOnly="true" />
        </MudStack>

        <MudStack Class="mt-2" Spacing="1">
            @foreach (var creator in Project.Creators)
            {
                <CreatorComponent Creator="creator"></CreatorComponent>
            }
        </MudStack>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Error"><MudIcon Icon="@Icons.Material.Filled.Cancel" Class="mr-2" /> Annuller</MudButton>
        <MudButton OnClick="Submit" Color="Color.Success"><MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-2" /> Bekræft</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public OrderView Project { get; set; } = new();

    [Parameter]
    public List<CreatorView> Creators { get; set; } = new List<CreatorView>();

    private DateTime? _deliveryDate;

    private async void Submit()
    {


        await OrderService.UpdateObject(Project.Id, Project.ToDto());
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();
}

