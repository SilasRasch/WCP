@page "/projects"
@using System.Net.Http.Json
@using Microsoft.EntityFrameworkCore
@using WCPAdminFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities
@using WCPShared.Models.Enums
@using WCPShared.Models.Views
@using WCPShared.Services.EntityFramework
@inject OrderService OrderService
@inject IWcpDbContext Context
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Projekter</PageTitle>

<MudDataGrid T="Order" SelectOnRowClick="@_selectable" MultiSelection="@_selectable" Items="@ProjectList" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" Hideable="@_hidable" Striped="@_striped" Elevation="3"
    ColumnResizeMode="@(_resizable ? ResizeMode.Column : ResizeMode.None)" DragDropColumnReordering="_movable" FilterCaseSensitivity="DataGridFilterCaseSensitivity.Ignore" FilterDefinitions="@filters">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Projekter</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudIconButton onclick="Refetch" Icon="@Icons.Material.Filled.Refresh" Class="hover:animate-spin-once"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="ToggleOpenTableSettings" Class="hover:animate-spin-once"></MudIconButton>
        <MudPopover Open="@_open" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.BottomRight">
            <div class="d-flex flex-column">
                <MudText>Tabel-indstillinger</MudText>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_selectable" Color="Color.Primary">Selectable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_resizable" Color="Color.Primary">Resizable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_movable" Color="Color.Primary">Movable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_hidable" Color="Color.Primary">Hidable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_groupBrand" Color="Color.Primary">Gruppér brands</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_striped" Color="Color.Primary">Zebra</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_stickyActions" Color="Color.Primary">Sticky actions</MudSwitch>
                <MudDivider></MudDivider>

                <MudButton OnClick="@ToggleOpenTableSettings" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Luk</MudButton>
            </div>
        </MudPopover>
    </ToolBarContent>
    <Columns>
        @if (_selectable)
        {
            <SelectColumn T="Order" />
        }
        <PropertyColumn Property="x => x.Id" Title="Id">
            <CellTemplate>
                <div @onclick="() => OpenDialogAsync(context.Item)" class="flex justify-center rounded-full w-10 p-2 cursor-pointer bg-red-500 text-white">
                    <MudText>@context.Item.Id</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ProjectName" Title="Projektnavn" />
        <PropertyColumn Property="x => x.Brand.Name" SortBy="@_sortBy" Title="Brand" Grouping="_groupBrand" />
        <TemplateColumn Title="Creators">
            <CellTemplate>
                <MudAvatarGroup Max="1" Spacing="3" Class="cursor-pointer" @onclick="(() => OpenCreatorDialog(context.Item))">
                    @foreach (var participation in context.Item.Participations)
                    {
                        <div class="flex flex-col justify-center items-center">
                            <MudAvatar Color="Color.Primary">
                                @if (participation.Creator.ImgURL is not null)
                                {
                                    <MudImage Src="@participation.Creator.ImgURL" />
                                }
                                else
                                {
                                    @participation.Creator.User.Name.First();
                                }
                            </MudAvatar>
                        </div>
                    }

                    @if (context.Item.Participations.Count == 0)
                    {
                        <MudText Class="p-2 cursor-pointer">-</MudText>
                    }
                </MudAvatarGroup>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.ProjectType" Title="Type" />
        <PropertyColumn Property="x => x.Status" Title="Status" CellClass="cursor-pointer">
            <CellTemplate>
                <div class="@ProjectHelper.GetStatusColor(context.Item.Status)" @onclick="() => OpenStatusDialogAdmin(context.Item)">
                    @ProjectHelper.GetStatusString(context.Item.Status)
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.DeliveryDate" Title="Deadline">
            <CellTemplate>
                @if(context.Item.DeliveryDate != DateTime.MinValue) 
                {
                    <p>@context.Item.DeliveryDate.ToString("dd-MM-yyyy") (@((context.Item.DeliveryDate - DateTime.Now).Days) dage)</p>
                }
                else
                {
                    <p>-</p>
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Created" Title="Oprettet">
            <CellTemplate>
                @context.Item.Created.ToString("dd-MM-yyyy")
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.InternalNotes" Title="Note" />
        <TemplateColumn Title="Actions" StickyRight="@_stickyActions">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" AriaLabel="Åben aktionsmenu" AnchorOrigin="Origin.BottomCenter">
                    <MudMenuItem OnClick="@((e) => OpenDialogAsync(context.Item))">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Edit"></MudIcon>
                            <MudText>Rediger</MudText>
                        </MudStack>
                    </MudMenuItem>
                    @if (context.Item.Status == 0)
                    {
                        <MudMenuItem OnClick="@((e) => OpenStatusDialog(context.Item, 1))">
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                                <MudText>Bekræft</MudText>
                            </MudStack>
                        </MudMenuItem>
                    }
                    @if (context.Item.Status <= ProjectStatus.Feedback && context.Item.Status > ProjectStatus.Unconfirmed)
                    {
                        <MudMenuItem OnClick="@((e) => OpenStatusDialog(context.Item, (int)context.Item.Status + 1))">
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight"></MudIcon>
                                <MudText>Ryk frem</MudText>
                            </MudStack>
                        </MudMenuItem>
                    }
                    @if (context.Item.Status > 0)
                    {
                        <MudMenuItem OnClick="@((e) => OpenStatusDialog(context.Item, (int)context.Item.Status - 1))">
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft"></MudIcon>
                                <MudText>Ryk tilbage</MudText>
                            </MudStack>
                        </MudMenuItem>
                    }
                    <MudMenuItem OnClick="@((e) => OpenStatusDialog(context.Item, -1))">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIcon>
                            <MudText>Annullér</MudText>
                        </MudStack>
                    </MudMenuItem>
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Order" PageSizeOptions="[100, 200, 300, 400, 500]" RowsPerPageString="Rækker per side:" />
    </PagerContent>
</MudDataGrid>

@code {
    // Open table settings
    private bool _open = false;
    private bool _selectable = false;
    private bool _resizable = false;
    private bool _movable = false;
    private bool _hidable = false;
    private bool _striped = true;
    private bool _stickyActions = true;
    private bool _groupBrand = false;

    private List<IFilterDefinition<Order>> filters = new List<IFilterDefinition<Order>>() 
    {
        new FilterDefinition<Order>()
        {
            FilterFunction = x => x.Status != ProjectStatus.Unconfirmed && x.Status != ProjectStatus.Finished && x.Status != ProjectStatus.CreatorFilming && x.Status != ProjectStatus.Feedback
        }
    };
    private IEnumerable<Order> ProjectList = new List<Order>();
    private string? _searchString;
    private List<string> _events = new();
    // custom sort by name length
    private Func<Order, object> _sortBy => x =>
    {
        return x.ProjectName;
    };

    // quick filter - filter globally across multiple columns with the same input
    private Func<Order, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.ProjectName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Brand.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.ProjectType.ToString()}{x.Id}{x.Brand.Organization.Name}{x.Name}{x.Email}{x.Phone}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override void OnInitialized()
    {
        FetchProjects();
    }

    private async Task OpenDialogAsync(Order project)
    {
        var parameters = new DialogParameters<Dialoges.EditProjectDialog>
        {
            { x => x.Project, project }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<Dialoges.EditProjectDialog>("Edit dialog", parameters, options);
        var result = await dialog.Result;
        FetchProjects();
    }

    private async Task OpenStatusDialog(Order project, int newStatus)
    {
        var parameters = new DialogParameters<Dialoges.ProjectStatusDialog>
        {
            { x => x.Project, project },
            { x => x.NewStatus, newStatus }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<Dialoges.ProjectStatusDialog>("Status dialog", parameters, options);
        var result = await dialog.Result;
        FetchProjects();
    }

    private async Task OpenStatusDialogAdmin(Order project)
    {
        var parameters = new DialogParameters<Dialoges.ProjectStatusDialog_Admin>
        {
            { x => x.Project, project }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<Dialoges.ProjectStatusDialog_Admin>("Status admin dialog", parameters, options);
        var result = await dialog.Result;
        FetchProjects();
    }

    private async Task OpenCreatorDialog(Order project)
    {
        var parameters = new DialogParameters<Dialoges.CreatorSelectionDialog>
        {
            { x => x.Project, project }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<Dialoges.CreatorSelectionDialog>("Creator dialog", parameters, options);
        var result = await dialog.Result;
        FetchProjects();
    }

    private void FetchProjects()
    {
        Context.ChangeTracker.Clear();
        ProjectList = Context.Orders
            .Include(x => x.Brand)
            .ThenInclude(b => b.Organization)
            .ThenInclude(x => x.Language)
            .Include(x => x.Videographer)
            .ThenInclude(x => x!.User)
            .Include(x => x.Editor)
            .ThenInclude(x => x!.User)
            .Include(x => x.StaticTemplates)
            .Include(x => x.Participations)
            .ThenInclude(x => x.Creator)
            .ThenInclude(x => x.User)
            .ThenInclude(x => x.Language)
            .AsSplitQuery()
            .ToList()
            .OrderBy(x => (int)x.Status);
    }

    private void Refetch() 
    {
        FetchProjects();
        StateHasChanged();
    }

    void ToggleOpenTableSettings()
    {
        _open = !_open;
    }
}