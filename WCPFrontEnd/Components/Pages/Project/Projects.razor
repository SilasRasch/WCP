@page "/projects"
@using System.Net.Http.Json
@using WCPAdminFrontEnd.Services
@using WCPShared.Models.Views
@using WCPShared.Services.EntityFramework
@inject OrderService OrderService
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Projekter</PageTitle>

<MudDataGrid T="OrderView" SelectOnRowClick="@_selectable" MultiSelection="@_selectable" Items="@ProjectList" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" Hideable="@_hidable"
    RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged" ColumnResizeMode="@(_resizable ? ResizeMode.Column : ResizeMode.None)" DragDropColumnReordering="_movable">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Projekter</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="ToggleOpenTableSettings"></MudIconButton>
        <MudPopover Open="@_open" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.BottomRight">
            <div class="d-flex flex-column">
                <MudText>Tabel-indstillinger</MudText>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_selectable" Color="Color.Primary">Selectable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_resizable" Color="Color.Primary">Resizable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_movable" Color="Color.Primary">Movable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_hidable" Color="Color.Primary">Hidable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_stickyActions" Color="Color.Primary">Sticky actions</MudSwitch>
                <MudDivider></MudDivider>
                <MudButton OnClick="@ToggleOpenTableSettings" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Luk</MudButton>
            </div>
        </MudPopover>
    </ToolBarContent>
    <Columns>
        @if (_selectable)
        {
            <SelectColumn T="OrderView" />
        }
        <PropertyColumn Property="x => x.Id" Title="Nr" />
        <PropertyColumn Property="x => x.ProjectName" Title="Projektnavn" />
        <PropertyColumn Property="x => x.Brand.Name" SortBy="@_sortBy" Title="Brand" />
        <TemplateColumn Title="Creators">
            <CellTemplate>
                <MudAvatarGroup Max="3" Spacing="3">
                    @foreach (var creator in context.Item.Creators)
                    {
                        <div class="flex flex-col justify-center items-center">
                            <MudAvatar Color="Color.Primary">
                                @if (creator.ImgURL is not null)
                                {
                                    <MudImage Src="@creator.ImgURL" />
                                }
                                else
                                {
                                    @creator.User.Name.First();
                                }
                            </MudAvatar>
                            <MudText>@creator.User.Name.Split(" ").First() @creator.User.Name.Split(" ").Skip(1).First().First().</MudText>
                        </div>
                    }
                </MudAvatarGroup>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.ProjectType" Title="Type" />
        <PropertyColumn Property="x => x.Status" Title="Status" CellClass="cursor-pointer">
            <CellTemplate>
                <div class="@ProjectHelper.GetStatusColor(context.Item.Status)" @onclick="() => OpenStatusDialog(context.Item)">
                    @ProjectHelper.GetStatusString(context.Item.Status)
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Created" Title="Deadline">
            <CellTemplate>
                @context.Item.Created.ToString("d")
            </CellTemplate>
        </PropertyColumn>
        <TemplateColumn Title="Actions" StickyRight="@_stickyActions">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" AriaLabel="Åben aktionsmenu" AnchorOrigin="Origin.BottomCenter">
                    <MudMenuItem OnClick="@((e) => OpenDialogAsync(context.Item))">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Edit"></MudIcon>
                            <MudText>Rediger</MudText>
                        </MudStack>
                    </MudMenuItem>
                    @if (context.Item.Status == 0)
                    {
                        <MudMenuItem>
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                                <MudText>Bekræft</MudText>
                            </MudStack>
                        </MudMenuItem>
                    }
                    @if (context.Item.Status <= 6 && context.Item.Status > 0)
                    {
                        <MudMenuItem>
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight"></MudIcon>
                                <MudText>Ryk frem</MudText>
                            </MudStack>
                        </MudMenuItem>
                    }
                    @if (context.Item.Status > 0)
                    {
                        <MudMenuItem>
                            <MudStack Row="true">
                                <MudIcon Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft"></MudIcon>
                                <MudText>Ryk tilbage</MudText>
                            </MudStack>
                        </MudMenuItem>
                    }
                    <MudMenuItem>
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIcon>
                            <MudText>Annullér</MudText>
                        </MudStack>
                    </MudMenuItem>
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="OrderView" />
    </PagerContent>
</MudDataGrid>

@code {
    // Open table settings
    private bool _open = false;
    private bool _selectable = false;
    private bool _resizable = false;
    private bool _movable = false;
    private bool _hidable = false;
    private bool _stickyActions = true;

    private IEnumerable<OrderView> ProjectList = new List<OrderView>();
    private string? _searchString;
    private List<string> _events = new();
    // custom sort by name length
    private Func<OrderView, object> _sortBy => x =>
    {
        return x.ProjectName;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<OrderView, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.ProjectName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Brand.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.ProjectName} {x.ProjectType} {x.Brand.Name}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await FetchProjects();
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<OrderView> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<OrderView> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<OrderView> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task OpenDialogAsync(OrderView project)
    {
        var parameters = new DialogParameters<Dialoges.EditProjectDialog>
        {
            { x => x.Project, project }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<Dialoges.EditProjectDialog>("Edit dialog", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await FetchProjects();
        }
    }

    private async Task OpenStatusDialog(OrderView project)
    {
        var parameters = new DialogParameters<Dialoges.ProjectStatusDialog>
        {
            { x => x.Project, project }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<Dialoges.ProjectStatusDialog>("Status dialog", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await FetchProjects();
        }
    }

    private async Task FetchProjects()
    {
        ProjectList = await OrderService.GetAllObjectsView();
    }

    void ToggleOpenTableSettings()
    {
        _open = !_open;
    }
}