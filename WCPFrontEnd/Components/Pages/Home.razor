@page "/"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities
@using WCPShared.Models.Entities.ProjectModels
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Models.Enums
@using WCPShared.Services
@inject IWcpDbContext Context
@inject IJSRuntime jsRuntime
@inject StripeService StripeService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>WebContent Platform</PageTitle>

<WCPFrontEnd.Components.Pages.ProjectPages.FileSystem.ProjectFileBar />

<AuthorizeView>
    <NotAuthorized>
        <div class="w-full">
            <MudStack Justify="Justify.Center">
                <MudText Class="text-center" Typo="Typo.h2">Velkommen</MudText>
                <MudStack Row Justify="Justify.Center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">
                        <NavLink class="text-white" href="register-creator">Bliv creator</NavLink>
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">
                        <NavLink class="text-white" href="register">Bliv kunde</NavLink>
                    </MudButton>
                </MudStack>
            </MudStack>
        </div>
    </NotAuthorized>   
    <Authorized>
        <MudPaper Class="pa-4 mb-2">
            <MudText Typo="Typo.body1">Hej, <b>@context.User.Identity!.Name.Split(' ').First()</b>! 👋</MudText>
        </MudPaper>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Bruger">
    <Authorized>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Creator">
    <Authorized>
    </Authorized>
</AuthorizeView>

<MudStack>
    @if (data is not null)
    {
        <MudStack Row>
            <MudPaper Class="pa-4" Width="25%">
                <MudText Typo="Typo.caption">Antal projekter i alt</MudText>
                <MudText Typo="Typo.h1">@projects.Count</MudText>
            </MudPaper>
            <MudPaper Class="pa-4" Width="25%">
                <MudText Typo="Typo.caption">Projekter denne måned</MudText>
                <MudText Typo="Typo.h1">@projects.Where(x => x.Created.Month == DateTime.Now.Month).Count()</MudText>
            </MudPaper>
            <MudPaper Class="pa-4" Width="25%">
                <MudText Typo="Typo.caption">Projekter sidste måned</MudText>
                <MudText Typo="Typo.h1">@projects.Where(x => x.Created.Month == DateTime.Now.AddMonths(-1).Month).Count()</MudText>
            </MudPaper>
            <MudPaper Class="pa-4" Width="25%">
                <MudText Typo="Typo.caption">Ventende projekter</MudText>
                <AuthorizeView Roles="Admin">
                    <MudText Typo="Typo.h1">@projects.Where(x => x.Status == ProjectStatus.Unconfirmed || x.Status == ProjectStatus.Queued || x.Status == ProjectStatus.Editing).Count()</MudText>
                </AuthorizeView>
                <AuthorizeView Roles="Bruger">
                    <MudText Typo="Typo.h1">@projects.Where(x => x.Status == ProjectStatus.Planned || x.Status == ProjectStatus.Feedback).Count()</MudText>
                </AuthorizeView>
                <AuthorizeView Roles="Creator">
                    <MudText Typo="Typo.h1">@projects.Where(x => x.Status == ProjectStatus.CreatorFilming).Count()</MudText>
                </AuthorizeView>

            </MudPaper>
            <MudPaper Class="pa-4" Width="25%">
                <MudText Typo="Typo.caption">Antal videoer i alt</MudText>
                <MudText Typo="Typo.h1">@projects.Sum(x => x.Amount)</MudText>
            </MudPaper>
        </MudStack>
        <AuthorizeView Roles="Admin">
            <Authorized>
                <MudStack Row StretchItems="StretchItems.All">
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.h6">Creator deadlines i dag</MudText>
                        <MudDataGrid Items="@projects.Where(x => x.Deadline.Date == DateTime.Now.Date && x.Status != ProjectStatus.Cancelled && x.Status < ProjectStatus.Feedback)">
                            <Columns>
                                <PropertyColumn Property="x => x.Name" Title="Navn" Sortable="false" />
                                <PropertyColumn Context="prop" Property="x => x.Brand" Title="Brand" Sortable="false">
                                    <CellTemplate>
                                        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                            <MudText Typo="Typo.h6">@ProjectHelper.CountryStringToFlag(prop.Item.Brand.Organization.Language.IsoLanguageCode) </MudText>
                                            @prop.Item.Brand.Name (@prop.Item.Brand.Organization.Name.Trim())
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <TemplateColumn Context="entity" Title="Type" Sortable="false">
                                    <CellTemplate>
                                        @if (entity.Item is UgcProject)
                                        {
                                            <MudText>UGC</MudText>
                                        }
                                        else if (entity.Item is StaticProject)
                                        {
                                            <MudText>Statics</MudText>
                                        }
                                        else if (entity.Item is PhotoProject)
                                        {
                                            <MudText>Photos</MudText>
                                        }
                                    </CellTemplate>
                                </TemplateColumn>
                                <PropertyColumn Context="prop" Property="x => x.Deadline" Title="Deadline" Sortable="false">
                                    <CellTemplate>
                                        @prop.Item.Deadline.ToString("d")
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Context="prop" Property="x => x.Status" Title="Status" Sortable="false">
                                    <CellTemplate>
                                        <div class="@ProjectHelper.GetStatusColor(prop.Item.Status)">
                                            @ProjectHelper.GetStatusString(prop.Item.Status)
                                        </div>
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>
                            <NoRecordsContent>
                                <MudText>Der er ingen projekter, der forfalder i dag... 🤑</MudText>
                            </NoRecordsContent>
                        </MudDataGrid>
                    </MudStack>
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.h6">Afleveringer i dag</MudText>
                        <MudDataGrid Items="@projects.Where(x => x.Deadline.AddDays(2).Date == DateTime.Now.Date && x.Status != ProjectStatus.Cancelled && x.Status < ProjectStatus.Feedback)">
                            <Columns>
                                <PropertyColumn Property="x => x.Name" Title="Navn" Sortable="false" />
                                <PropertyColumn Context="prop" Property="x => x.Brand" Title="Brand" Sortable="false">
                                    <CellTemplate>
                                        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                            <MudText Typo="Typo.h6">@ProjectHelper.CountryStringToFlag(prop.Item.Brand.Organization.Language.IsoLanguageCode) </MudText>
                                            @prop.Item.Brand.Name (@prop.Item.Brand.Organization.Name.Trim())
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <TemplateColumn Context="entity" Title="Type" Sortable="false">
                                    <CellTemplate>
                                        @if (entity.Item is UgcProject)
                                        {
                                            <MudText>UGC</MudText>
                                        }
                                        else if (entity.Item is StaticProject)
                                        {
                                            <MudText>Statics</MudText>
                                        }
                                        else if (entity.Item is PhotoProject)
                                        {
                                            <MudText>Photos</MudText>
                                        }
                                    </CellTemplate>
                                </TemplateColumn>
                                <PropertyColumn Context="prop" Property="x => x.Deadline" Title="Deadline" Sortable="false">
                                    <CellTemplate>
                                        @prop.Item.Deadline.AddDays(2).ToString("d")
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Context="prop" Property="x => x.Status" Title="Status" Sortable="false">
                                    <CellTemplate>
                                        <div class="@ProjectHelper.GetStatusColor(prop.Item.Status)">
                                            @ProjectHelper.GetStatusString(prop.Item.Status)
                                        </div>
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>
                            <NoRecordsContent>
                                <MudText>Der er ingen projekter, der forfalder i dag... 💰</MudText>
                            </NoRecordsContent>
                        </MudDataGrid>
                    </MudStack>
                </MudStack>
            </Authorized>
        </AuthorizeView>


        <MudPaper Class="pa-4">
            <MudStack Spacing="0">
                <MudText Typo="Typo.h6">Nyeste projekter</MudText>
                <MudDataGrid Items="@projects.TakeLast(5).Reverse()" Elevation="0">
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Navn" Sortable="false" />
                        <PropertyColumn Context="prop" Property="x => x.Brand" Title="Brand" Sortable="false">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.h6">@ProjectHelper.CountryStringToFlag(prop.Item.Brand.Organization.Language.IsoLanguageCode) </MudText>
                                    @prop.Item.Brand.Name (@prop.Item.Brand.Organization.Name.Trim())
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                        <TemplateColumn Title="Type" Sortable="false">
                            <CellTemplate>
                                @if (context.Item is UgcProject)
                                {
                                    <MudText>UGC</MudText>
                                }
                                else if (context.Item is StaticProject)
                                {
                                    <MudText>Statics</MudText>
                                }
                                else if (context.Item is PhotoProject)
                                {
                                    <MudText>Photos</MudText>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Context="prop" Property="x => x.Created" Title="Oprettet" Sortable="false">
                            <CellTemplate>
                                @prop.Item.Created
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Context="prop" Property="x => x.Status" Title="Status" Sortable="false">
                            <CellTemplate>
                                <div class="@ProjectHelper.GetStatusColor(prop.Item.Status)">
                                    @ProjectHelper.GetStatusString(prop.Item.Status)
                                </div>
                            </CellTemplate>
                        </PropertyColumn>
                    </Columns>
                </MudDataGrid>
            </MudStack>
        </MudPaper>

    }
    @if (data is not null)
    {
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">Fordeling af projekt-typer</MudText>
        <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.SpaceAround">
            
                <MudStack Spacing="0">
                    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels">
                        <CustomGraphics>
                            <text class="donut-inner-text" x="50%" y="45%" dominant-baseline="middle" text-anchor="middle" font-family="Helvetica" font-size="2">Total</text>
                            <text class="donut-inner-text" x="50%" y="55%" dominant-baseline="middle" text-anchor="middle" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>
                        </CustomGraphics>
                    </MudChart>
                </MudStack>

                <MudStack Spacing="0">
                    <MudChart ChartOptions="@(new ChartOptions { ShowLegend = false })" ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="354px"></MudChart>
                </MudStack>
            
        </MudStack>
    </MudPaper>
    }
    else
    {
        @* <div class="flex flex-col gap-2 w-full">
                    <MudPaper Width="100%" Class="pa-4">
                        <MudStack Spacing="0">
                            <MudSkeleton Width="100%" Height="64px" />
                            <MudSkeleton Width="100%" Height="64px" />
                            <MudSkeleton Width="100%" Height="64px" />
                            <MudSkeleton Width="100%" Height="64px" />
                            <MudSkeleton Width="100%" Height="64px" />
                            <MudSkeleton Width="100%" Height="64px" />
                        </MudStack>
                    </MudPaper>

                    <MudStack Row="true">
                        <MudPaper Class="pa-4">
                            <MudSkeleton SkeletonType="SkeletonType.Circle" Width="300px" Height="300px" />
                        </MudPaper>
                        <MudPaper Class="pa-4">
                            <MudSkeleton Height="300px" Width="650px" />
                        </MudPaper>
                    </MudStack>
                </div> *@
    }
</MudStack>

@code {
    private List<Project> projects = [];
    private int ugcCount = 0;
    private int staticCount = 0;
    private int photoCount = 0;
    private User? User;

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    public double[] data;
    public string[] labels = { "UGC", "Statics", "Stills" };
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = { "UGC", "Statics", "Stills" };

    protected override async Task OnInitializedAsync() 
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
        User = await Context.Users.Include(x => x.Organization).AsNoTracking().SingleOrDefaultAsync(x => x.Email == email);

        if (User is not null) 
        {
            projects = await Context.Projects
                .Include(x => x.Brand)
                .ThenInclude(x => x.Organization)
                .ThenInclude(x => x.Language)
                .Where(x => x.Status != ProjectStatus.Cancelled)
                .AsSplitQuery()
                .AsNoTracking()
                .ToListAsync();

            if (User.Role == UserRole.Bruger)
                projects = projects.Where(x => x.Brand.OrganizationId == User.OrganizationId).ToList();

            if (User.Role == UserRole.Creator)
                projects = projects
                    .Where(x => x is CreatorProject creatorProject && 
                        creatorProject.Participations.Any(x => x.Creator.UserId == User.Id))
                        .ToList();

            ugcCount = Context.UgcProjects.AsNoTracking().Count();
            staticCount = Context.StaticProjects.AsNoTracking().Count();
            photoCount = Context.PhotoProjects.AsNoTracking().Count();

            data = [ugcCount, staticCount, photoCount];
            Series.Add(new ChartSeries() { Data = data });
        }
    }
}