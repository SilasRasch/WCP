@page "/"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities
@using WCPShared.Models.Entities.ProjectModels
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Models.Enums
@using WCPShared.Services
@inject IWcpDbContext Context
@inject IJSRuntime jsRuntime
@inject StripeService StripeService
@inject ProjectService ProjectService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomDialogService DialogService
@attribute [Authorize]

<PageTitle>WebContent Platform</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <div class="w-full">
            <MudStack Justify="Justify.Center">
                <MudText Class="text-center" Typo="Typo.h2">Velkommen</MudText>
                <MudStack Row Justify="Justify.Center">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">
                        <NavLink class="text-white" href="register-creator">Bliv creator</NavLink>
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">
                        <NavLink class="text-white" href="register">Bliv kunde</NavLink>
                    </MudButton>
                </MudStack>
            </MudStack>
        </div>
    </NotAuthorized>   
    <Authorized>
        <MudStack Row AlignItems="AlignItems.Center" Class="">
            <MudStack Spacing="0" Class="mb-3">
                <MudText Typo="Typo.h6">Hej, <b>@context.User.Identity!.Name.Split(' ').First()</b>! 👋</MudText>
                <MudText Class="text-neutral-400">Få et omfattende overblik over dine projekter</MudText>
            </MudStack>

            <MudSpacer />

            <AuthorizeView Context="userBtns" Roles="Bruger">
                <MudStack Row Spacing="1" Class="h-fit">
                    <MudButton Variant="Variant.Outlined" Class="rounded-lg !normal-case">Se rapport</MudButton>
                    <MudButton Variant="Variant.Outlined" Class="rounded-lg !normal-case" StartIcon="@Icons.Material.Filled.FilterList">Filtre</MudButton>
                    <MudButton DropShadow="false" OnClick="DialogService.OpenProjectCreation" Variant="Variant.Filled" Class="rounded-lg !normal-case" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddCircleOutline">Opret ny</MudButton>
                </MudStack>
            </AuthorizeView>
        </MudStack>
        
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Bruger">
    <Authorized>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Creator">
    <Authorized>
    </Authorized>
</AuthorizeView>

<AuthorizeView Context="AuthTop">
    <MudStack>
    @if (data is not null)
    {
        <MudStack Row>
            <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
                <MudStack Row AlignItems="AlignItems.Center" Class="w-full">
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-primary-200 flex">
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Assignment" Class="text-primary-700"></MudIcon>
                    </MudStack>
                    <MudStack Spacing="0" Class="w-full">
                        <MudText Class="text-neutral-400">Total projekter</MudText>

                        <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h5">@projects.Count()</MudText>
                            <span class="text-xs font-semibold bg-success-50 text-success-400 h-fit rounded-lg py-[2px] px-[6px]">+3,2%</span>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudPaper>

            <AuthorizeView Roles="Admin">
                    <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
                        <MudStack Row AlignItems="AlignItems.Center" Class="w-full">
                            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-yellow-200 flex">
                                <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Star" Class="text-yellow-700"></MudIcon>
                            </MudStack>
                            <MudStack Spacing="0" Class="w-full">
                                <MudText Class="text-neutral-400">Gennemsnitlig score</MudText>

                                <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                    <MudText Typo="Typo.h5">@AverageFeedbackScore</MudText>
                                    <span class="text-xs font-semibold bg-success-50 text-success-400 h-fit rounded-lg py-[2px] px-[6px]">+3,2%</span>
                                </MudStack>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
            </AuthorizeView>
            
            <AuthorizeView Roles="Creator,Bruger">
                <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
                    <MudStack Row AlignItems="AlignItems.Center" Class="w-full">
                        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-yellow-200 flex">
                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Star" Class="text-yellow-700"></MudIcon>
                        </MudStack>
                        <MudStack Spacing="0" Class="w-full">
                            <MudText Class="text-neutral-400">Projekter denne måned</MudText>

                            <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.h5">@projects.Where(x => x.Created.Month == DateTime.Now.Month && x.Created.Year == DateTime.Now.Year).Count()</MudText>
                                <span class="text-xs font-semibold bg-success-50 text-success-400 h-fit rounded-lg py-[2px] px-[6px]">+3,2%</span>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </AuthorizeView>

            <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
                <MudStack Row AlignItems="AlignItems.Center" Class="w-full">
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-success-200 flex">
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Assignment" Class="text-success-700"></MudIcon>
                    </MudStack>
                    <MudStack Spacing="0" Class="w-full">
                        <MudText Class="text-neutral-400">Ventende projekter</MudText>

                        <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <AuthorizeView Roles="Admin">
                                <MudText Typo="Typo.h5">@projects.Where(x => x.Status == ProjectStatus.Unconfirmed || x.Status == ProjectStatus.Queued || x.Status == ProjectStatus.Editing).Count()</MudText>
                            </AuthorizeView>
                            <AuthorizeView Roles="Bruger">
                                <MudText Typo="Typo.h5">@projects.Where(x => x.Status == ProjectStatus.Planned || x.Status == ProjectStatus.Feedback).Count()</MudText>
                            </AuthorizeView>
                            <AuthorizeView Roles="Creator">
                                <MudText Typo="Typo.h5">@projects.Where(x => x.Status == ProjectStatus.CreatorFilming).Count()</MudText>
                            </AuthorizeView>
                            <span class="text-xs font-semibold bg-success-50 text-success-400 h-fit rounded-lg py-[2px] px-[6px]">+3,2%</span>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudPaper>

            <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
                <MudStack Row AlignItems="AlignItems.Center" Class="w-full">
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-warning-200 flex">
                        <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.PlayArrow" Class="text-warning-700"></MudIcon>
                    </MudStack>
                    <MudStack Spacing="0" Class="w-full">
                        <MudText Class="text-neutral-400">Antal videoer i alt</MudText>

                        <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudText Typo="Typo.h5">@projects.Sum(x => x.Concepts.Sum(c => c.Amount))</MudText>
                            <span class="text-xs font-semibold bg-success-50 text-success-400 h-fit rounded-lg py-[2px] px-[6px]">+3,2%</span>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudPaper>

            @* <MudPaper Class="pa-4" Width="25%">
                <MudText Typo="Typo.caption">Projekter denne måned</MudText>
                <MudText Typo="Typo.h1">@projects.Where(x => x.Created.Month == DateTime.Now.Month && x.Created.Year == DateTime.Now.Year).Count()</MudText>
            </MudPaper>
            <MudPaper Class="pa-4" Width="25%">
                <MudText Typo="Typo.caption">Projekter sidste måned</MudText>
                <MudText Typo="Typo.h1">@projects.Where(x => x.Created.Month == DateTime.Now.AddMonths(-1).Month && x.Created.Year == DateTime.Now.Year).Count()</MudText>
            </MudPaper> *@
        </MudStack>
        
        <MudGrid Spacing="3">
            <MudItem xs="3">
                @if (data is not null)
                {
                    <MudPaper Class="border-[1px] border-border" Elevation="0">
                        <MudText Typo="Typo.h6" Class="pa-4">Projekt statusser</MudText>
                        <MudDivider />

                        <MudStack Class="pb-4" Row="true" AlignItems="AlignItems.End" Justify="Justify.SpaceAround">
                            <MudStack Spacing="0">
                                <MudChart ChartType="ChartType.Donut" Height="300px" @bind-SelectedIndex="Index" InputData="@data" InputLabels="@labels">
                                    <CustomGraphics>
                                        <text class="donut-inner-text" x="50%" y="45%" dominant-baseline="middle" text-anchor="middle" font-family="Helvetica" font-size="2">Total</text>
                                        <text class="donut-inner-text" x="50%" y="55%" dominant-baseline="middle" text-anchor="middle" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>
                                    </CustomGraphics>
                                </MudChart>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                }
            </MudItem>
            <MudItem xs="6">
                @if (data is not null)
                {
                    <MudPaper Class="border-[1px] border-border" Elevation="0">
                        <MudText Typo="Typo.h6" Class="pa-4">Projekter per type</MudText>
                        <MudDivider />

                        <MudStack Class="pb-4" Row="true" AlignItems="AlignItems.End" Justify="Justify.SpaceAround">
                            <MudStack Spacing="0">
                                <MudChart ChartOptions="@(new ChartOptions { ShowLegend = false })" ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="354px"></MudChart>
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                }
            </MudItem>
            <MudItem xs="3">
                @if (data is not null)
                {
                    <MudPaper Class="border-[1px] border-border" Elevation="0">
                        <MudText Typo="Typo.h6" Class="pa-4">Nyheder</MudText>
                        <MudDivider />

                        <MudStack Spacing="0" Class="pb-4 h-[370px] overflow-hidden overflow-y-scroll" Justify="Justify.FlexStart">
                            <MudStack Row Class="py-3 px-4 w-full" AlignItems="AlignItems.Center">
                                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-xl bg-success-200 flex">
                                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Newspaper" Class="text-success-700"></MudIcon>
                                </MudStack>
                                <MudStack Spacing="0">
                                    <MudText>Platform 2.0</MudText>
                                        <span class="text-neutral-400">Succesfuld release af Platform 2.0! <a class="text-blue-500 underline">Læs mere</a></span>
                                </MudStack>
                            </MudStack>

                            <MudDivider />
                        </MudStack>
                        
                    </MudPaper>
                }
            </MudItem>
        </MudGrid>

        <MudPaper Class="pa-4 border-[1px] border-border" Elevation="0">
            <MudStack Spacing="0">
                <MudText Typo="Typo.h6">Nyeste projekter</MudText>
                <MudDataGrid Items="@projects.TakeLast(5).Reverse()" Elevation="0">
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Navn" Sortable="false" />
                        <PropertyColumn Context="prop" Property="x => x.Brand" Title="Brand" Sortable="false">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.h6">@ProjectHelper.CountryStringToFlag(prop.Item.Brand.Organization.Language.IsoLanguageCode) </MudText>
                                    @prop.Item.Brand.Name (@prop.Item.Brand.Organization.Name.Trim())
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                        <TemplateColumn Title="Type" Sortable="false">
                            <CellTemplate>
                                @if (context.Item is UgcProject)
                                {
                                    <MudText>UGC</MudText>
                                }
                                else if (context.Item is StaticProject)
                                {
                                    <MudText>Statics</MudText>
                                }
                                else if (context.Item is PhotoProject)
                                {
                                    <MudText>Photos</MudText>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Context="prop" Property="x => x.Created" Title="Oprettet" Sortable="false">
                            <CellTemplate>
                                @prop.Item.Created
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Context="prop" Property="x => x.Status" Title="Status" Sortable="false">
                            <CellTemplate>
                                <div class="@ProjectHelper.GetStatusColor(prop.Item.Status)">
                                    @ProjectHelper.GetStatusString(prop.Item.Status)
                                </div>
                            </CellTemplate>
                        </PropertyColumn>
                    </Columns>
                </MudDataGrid>
            </MudStack>
        </MudPaper>
    }
</MudStack>
</AuthorizeView>

@code {
    private List<Project> projects = [];
    private int ugcCount = 0;
    private int staticCount = 0;
    private int photoCount = 0;
    private User? User;

    private double AverageFeedbackScore;

    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    public double[] data = [];
    public string[] labels = [];
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = { "UGC", "Statics", "Stills" };

    protected override async Task OnInitializedAsync() 
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
        User = await Context.Users.Include(x => x.Organization).AsNoTracking().SingleOrDefaultAsync(x => x.Email == email);
        var feedback = await Context.Feedbacks.Include(x => x.Project).Where(x => x.Created.Month == DateTime.Now.AddMonths(-1).Month && x.Created.Year == DateTime.Now.AddMonths(-1).Year).ToListAsync();
        if (feedback.Any()) AverageFeedbackScore = Math.Round(feedback.Average(x => x.Score), 1);

        if (User is not null) 
        {
            if (User is not null && User.Role == UserRole.Admin)
            {
                projects = await ProjectService.GetAllProjects();
            }

            if (User is not null && User.Role == UserRole.Bruger)
            {
                projects = await ProjectService.GetProjectsBy(x => x.Brand.OrganizationId == User.OrganizationId);
            }

            if (User is not null && User.Role == UserRole.Creator)
            {
                projects = (await ProjectService.GetAllProjects())
                    .Where(x => x.Participations.Any(x => x.Creator.UserId == User.Id))
                    .ToList();
            }

            ugcCount = projects.Where(x => x.Type == ProjectType.UGC).Count();
            staticCount = projects.Where(x => x.Type == ProjectType.Statics).Count();
            photoCount = projects.Where(x => x.Type == ProjectType.Photos).Count();

            var statusGroups = projects.GroupBy(x => x.Status).Select(group => group.ToList()).ToList();
            labels = projects.GroupBy(x => x.Status).Select(group => group.Key.ToString()).ToArray();
            data = statusGroups.Select(x => Convert.ToDouble(x.Count())).ToArray();
            Series.Add(new ChartSeries() { Data = data });
        }
    }
}