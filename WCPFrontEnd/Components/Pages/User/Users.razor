@page "/users"
@using System.Net.Http.Json
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Components.Shared
@using WCPShared.Models.Views
@using WCPShared.Services.EntityFramework
@inject UserService UserService
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Brugere</PageTitle>

<MudDataGrid T="UserView" SelectOnRowClick="@_selectable" MultiSelection="@_selectable" Items="@UserList" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" Hideable="@_hidable" Striped="@_striped" Elevation="3"
        RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged" ColumnResizeMode="@(_resizable ? ResizeMode.Column : ResizeMode.None)" DragDropColumnReordering="_movable">
    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">Brugere</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="ToggleAddDialog"></MudIconButton>
        </MudStack>
        
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudIconButton onclick="FetchUsers" Icon="@Icons.Material.Filled.Refresh" Class="hover:animate-spin-once"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="ToggleOpenTableSettings" Class="hover:animate-spin-once"></MudIconButton>
        <MudPopover Open="@_open" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.BottomRight">
            <div class="d-flex flex-column">
                <MudText>Tabel-indstillinger</MudText>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_selectable" Color="Color.Primary">Selectable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_resizable" Color="Color.Primary">Resizable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_movable" Color="Color.Primary">Movable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_hidable" Color="Color.Primary">Hidable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_groupRoles" Color="Color.Primary">Gruppér Roller</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_striped" Color="Color.Primary">Zebra</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_stickyActions" Color="Color.Primary">Sticky actions</MudSwitch>
                <MudDivider></MudDivider>

                <MudButton OnClick="@ToggleOpenTableSettings" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Luk</MudButton>
            </div>
        </MudPopover>
    </ToolBarContent>
    <Columns>
        @if (_selectable)
        {
            <SelectColumn T="UserView" />
        }
        <PropertyColumn Property="x => x.Id" Title="Id">
            <CellTemplate>
                <div class="flex justify-center rounded-full w-10 p-2 cursor-pointer bg-red-500 text-white">
                    <MudText>@context.Item.Id</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Name" Title="Navn" />
        <PropertyColumn Property="x => x.Email" Title="Email" />
        <PropertyColumn Property="x => x.IsActive" Title="Aktivitet">
            <CellTemplate>
                <MudText Color="@(context.Item.IsActive ? Color.Success : Color.Error)">
                    @(context.Item.IsActive ? "Aktiv" : "Inaktiv")
                </MudText>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Role" Title="Rolle" Grouping="_groupRoles" />
        <PropertyColumn Property="x => x.Phone" Title="Telefon">
            <CellTemplate>
                @if (!String.IsNullOrEmpty(context.Item.Phone))
                {
                    <MudText>@context.Item.Phone</MudText>
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Organization" Title="Organisation">
            <CellTemplate>
                @if (context.Item.Organization is not null)
                {
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@ProjectHelper.CountryStringToFlag(context.Item.Organization.Language) </MudText>
                        @context.Item.Organization.Name
                    </MudStack>
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.Language" Title="Sprog/Land">
            <CellTemplate>
                @if (context.Item.Language is not null)
                {
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h6">@ProjectHelper.CountryStringToFlag(context.Item.Language) </MudText>
                    </MudStack>
                }
            </CellTemplate>
        </PropertyColumn>

        <TemplateColumn Title="Actions" StickyRight="@_stickyActions">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" AriaLabel="Åben aktionsmenu" AnchorOrigin="Origin.BottomCenter">
                    <MudMenuItem OnClick="@((e) => ToggleUserActivation(context.Item))">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Edit"></MudIcon>
                            <MudText>Rediger</MudText>
                        </MudStack>
                    </MudMenuItem>
                    <MudMenuItem>
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Lock"></MudIcon>
                            <MudText>Reset kodeord</MudText>
                        </MudStack>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@((e) => ToggleUserActivation(context.Item))">
                        <MudStack Row="true">
                            <MudIcon Icon="@(context.Item.IsActive ? Icons.Material.Filled.Close : Icons.Material.Filled.Check)" Color="@(context.Item.IsActive ? Color.Error : Color.Success)"></MudIcon>
                            <MudText>@(context.Item.IsActive ? "Deaktivér" : "Aktivér")</MudText>
                        </MudStack>
                    </MudMenuItem>
                    <MudMenuItem OnClick="() => ToggleDeleteModal(context.Item.Id)">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIcon>
                            <MudText>Slet</MudText>
                        </MudStack>
                    </MudMenuItem>
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserView" />
    </PagerContent>
</MudDataGrid>

@code {
    // Open table settings
    private bool _open = false;
    private bool _selectable = false;
    private bool _resizable = false;
    private bool _movable = false;
    private bool _hidable = false;
    private bool _striped = true;
    private bool _stickyActions = true;
    private bool _groupRoles = false;

    private IEnumerable<UserView> UserList = new List<UserView>();
    private string? _searchString;
    private List<string> _events = new();

    private Func<UserView, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{x.Name} {x.Email}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await FetchUsers();
    }

    async Task RowClicked(DataGridRowClickEventArgs<UserView> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<UserView> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<UserView> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task FetchUsers()
    {
        UserList = await UserService.GetAllObjectsView();
    }

    private async Task ToggleUserActivation(UserView view)
    {
        var user = await UserService.GetObject(view.Id);

        if (user is not null)
        {
            user.IsActive = !user.IsActive;
            await UserService.UpdateObject(user.Id, user);
            await FetchUsers();
        }
    }

    private async Task ToggleDeleteModal(int id)
    {
        var parameters = new DialogParameters<DeleteModal>
        {
            { x => x.Type, "bruger" },
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<DeleteModal>("Delete dialog", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await UserService.DeleteObject(id);
            await FetchUsers();
        }
    }

    private async Task ToggleAddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<Dialoges.AddUserDialog>("Add dialog", options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            await FetchUsers();
    }

    private void ToggleOpenTableSettings() => _open = !_open;
}