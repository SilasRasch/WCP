@page "/creators"
@using System.Net.Http.Json
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Components.Shared
@using WCPShared.Models.Views
@using WCPShared.Services.EntityFramework
@inject CreatorService CreatorService
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Creators</PageTitle>

<MudDataGrid T="CreatorView" SelectOnRowClick="@_selectable" MultiSelection="@_selectable" Items="@CreatorList" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" Hideable="@_hidable" Striped="@_striped" Elevation="3"
             RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged" ColumnResizeMode="@(_resizable ? ResizeMode.Column : ResizeMode.None)" DragDropColumnReordering="_movable">
    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">Creators</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="ToggleAddDialog"></MudIconButton>
        </MudStack>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudIconButton onclick="FetchCreators" Icon="@Icons.Material.Filled.Refresh" Class="hover:animate-spin-once"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="ToggleOpenTableSettings" Class="hover:animate-spin-once"></MudIconButton>
        <MudPopover Open="@_open" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.BottomRight">
            <div class="d-flex flex-column">
                <MudText>Tabel-indstillinger</MudText>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_selectable" Color="Color.Primary">Selectable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_resizable" Color="Color.Primary">Resizable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_movable" Color="Color.Primary">Movable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_hidable" Color="Color.Primary">Hidable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_striped" Color="Color.Primary">Zebra</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_stickyActions" Color="Color.Primary">Sticky actions</MudSwitch>
                <MudDivider></MudDivider>

                <MudButton OnClick="@ToggleOpenTableSettings" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Luk</MudButton>
            </div>
        </MudPopover>
    </ToolBarContent>
    <Columns>
        @if (_selectable)
        {
            <SelectColumn T="CreatorView" />
        }

        <PropertyColumn Property="x => x.Id" Title="Id">
            <CellTemplate>
                <div class="flex justify-center rounded-full w-10 p-2 cursor-pointer bg-red-500 text-white">
                    <MudText>@context.Item.Id</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.ImgURL" Title="Billede" Sortable="false" Filterable="false">
            <CellTemplate>
                @if (!String.IsNullOrEmpty(context.Item.ImgURL))
                {
                    <MudImage Src="@context.Item.ImgURL" Class="max-h-12 rounded-full" />
                }
                
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.User.Name" Title="Navn" />
        <PropertyColumn Property="x => x.User.Email" Title="Email" />
        <PropertyColumn Property="x => x.User.IsActive" Title="Aktivitet">
            <CellTemplate>
                <MudText Color="@(context.Item.User.IsActive ? Color.Success : Color.Error)">
                    @(context.Item.User.IsActive ? "Aktiv" : "Inaktiv")
                </MudText>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.SubType" Title="Type" />
        <PropertyColumn Property="x => x.Gender" Title="Køn">
            <CellTemplate>
                @if (!String.IsNullOrEmpty(context.Item.Gender))
                {
                    <MudText>@context.Item.Gender</MudText>
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.Address" Title="Adresse">
            <CellTemplate>
                @if (!String.IsNullOrEmpty(context.Item.Address))
                {
                    <MudText>@context.Item.Address</MudText>
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.DateOfBirth" Title="Fødselsdag">
            <CellTemplate>
                @if (context.Item.DateOfBirth is not null)
                {
                    <MudText>@context.Item.DateOfBirth.Value.ToString("d") (@ProjectHelper.CalculateAge(context.Item.DateOfBirth.Value) år)</MudText>
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.Languages" Title="Sprog" Filterable="false" Sortable="false" >
            <CellTemplate>
                @if (context.Item.Languages is not null)
                {
                    <div class="flex justify-center gap-2">
                        @foreach (string lang in context.Item.Languages)
                        {
                            <MudText Typo="Typo.h5">
                                @ProjectHelper.CountryStringToFlag(lang)
                            </MudText>
                        }
                    </div>
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.User.Language" Title="Land">
            <CellTemplate>
                @if (context.Item.User.Language is not null)
                {
                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h5">@ProjectHelper.CountryStringToFlag(context.Item.User.Language) </MudText>
                    </MudStack>
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.User.Phone" Title="Telefon">
            <CellTemplate>
                @if (!String.IsNullOrEmpty(context.Item.User.Phone))
                {
                    <MudText>@context.Item.User.Phone</MudText>
                }
            </CellTemplate>
        </PropertyColumn>

        <TemplateColumn Title="Actions" StickyRight="@_stickyActions">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" AriaLabel="Åben aktionsmenu" AnchorOrigin="Origin.BottomCenter">
                    <MudMenuItem OnClick="@((e) => ToggleUserActivation(context.Item))">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Edit"></MudIcon>
                            <MudText>Rediger</MudText>
                        </MudStack>
                    </MudMenuItem>
                    <MudMenuItem OnClick="@((e) => ToggleUserActivation(context.Item))">
                        <MudStack Row="true">
                            <MudIcon Icon="@(context.Item.User.IsActive ? Icons.Material.Filled.Close : Icons.Material.Filled.Check)" Color="@(context.Item.User.IsActive ? Color.Error : Color.Success)"></MudIcon>
                            <MudText>@(context.Item.User.IsActive ? "Deaktivér" : "Aktivér")</MudText>
                        </MudStack>
                    </MudMenuItem>
                    <MudMenuItem OnClick="() => ToggleDeleteModal(context.Item.Id)">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIcon>
                            <MudText>Slet</MudText>
                        </MudStack>
                    </MudMenuItem>
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CreatorView" />
    </PagerContent>
</MudDataGrid>

@code {
    // Open table settings
    private bool _open = false;
    private bool _selectable = false;
    private bool _resizable = false;
    private bool _movable = false;
    private bool _hidable = false;
    private bool _striped = true;
    private bool _stickyActions = true;

    private IEnumerable<CreatorView> CreatorList = new List<CreatorView>();
    private string? _searchString;
    private List<string> _events = new();

    private Func<CreatorView, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{x.User.Name} {x.User.Email}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await FetchCreators();
    }

    async Task RowClicked(DataGridRowClickEventArgs<CreatorView> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<CreatorView> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<CreatorView> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task FetchCreators()
    {
        CreatorList = await CreatorService.GetAllObjectsView();
    }

    private async Task ToggleUserActivation(CreatorView view)
    {
        var creator = await CreatorService.GetObject(view.Id);

        if (creator is not null)
        {
            creator.User.IsActive = !creator.User.IsActive;
            await CreatorService.UpdateObject(creator.Id, creator);
            await FetchCreators();
        }
    }

    private async Task ToggleDeleteModal(int id)
    {
        var parameters = new DialogParameters<DeleteModal>
        {
            { x => x.Type, "creator" }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteModal>("Delete dialog", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await CreatorService.DeleteObject(id);
            await FetchCreators();
        }
    }

    private async Task ToggleAddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<Dialoges.AddUserDialog>("Add dialog", options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        await FetchCreators();
    }

    private void ToggleOpenTableSettings() => _open = !_open;
}