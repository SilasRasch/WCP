@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using WCPFrontEnd.Models
@using WCPFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Models.Enums
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWcpDbContext Context
@inject IJSRuntime JSRuntime

<MudIconButton Icon="@Icons.Material.Filled.ChatBubbleOutline" OnClick="OpenChat"></MudIconButton>

@if (isOpen) 
{

    <div class="absolute right-0 top-0 h-[100vh] bg-white z-40 shadow-lg shadow-black/30 xl:min-w-[384px]">
        @if (Recipient is null) 
        {
            <MudStack Spacing="0" Class="">
                <MudStack Row AlignItems="AlignItems.Center" Class="p-2 py-4" Spacing="2">
                    <MudIcon @onclick="() => isOpen = false" Class="cursor-pointer" Icon="@Icons.Material.Filled.KeyboardArrowLeft" />
                    <MudStack Spacing="0">
                        <span class="text-[18px] font-semibold">WebChat</span> 
                        <span class="text-neutral-400">Interagér med Platformens kollaboratører!</span>
                    </MudStack>
                </MudStack>

                <MudDivider />
                <MudStack Row Class="px-2 py-2 w-full" Spacing="0">
                    <input Class="px-2 text-lg w-full" placeholder="Søg efter personer" @onchange="e => SearchInputChanged((string) e.Value)" />
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Search" />
                </MudStack>
                <MudDivider />

                @foreach (var user in Users)
                {
                    <MudStack Class="pa-4 cursor-pointer" Row AlignItems="AlignItems.Center" onclick="@(() => ChangeRecipient(user.User))">
                        <MudAvatar Color="Color.Primary" Square Rounded>
                            @(user.User.Name.First())
                        </MudAvatar>
                        <MudStack Justify="Justify.Center" Spacing="0">
                            <MudStack Row>
                                <MudText>@user.User.Name</MudText>
                                @if (user.LatestMessage is not null) 
                                {
                                    @(GetTimeSpanString(DateTime.Now - user.LatestMessage.Sent))
                                }
                            </MudStack>
                            @if (user.LatestMessage is not null)
                            {
                                <MudText Typo="Typo.caption" Class="opacity-75">@user.LatestMessage.Message</MudText>
                            }
                            else 
                            {
                                <MudText Typo="Typo.caption" Class="opacity-75">I har ikke skabt kontakt endnu...</MudText>
                            }
                        </MudStack>
                    </MudStack>
                    <MudDivider />
                }
            </MudStack>
        }
        else
        {
            <MudStack AlignItems="AlignItems.Start" Spacing="0" Class="relative h-full min-w-72">
                <MudStack Row AlignItems="AlignItems.Center" Class="p-2 py-4 w-full" Spacing="2">
                    <MudIcon @onclick="() => Recipient = null" Class="cursor-pointer" Icon="@Icons.Material.Filled.KeyboardArrowLeft" />
                    <MudAvatar Color="Color.Primary" Square Rounded>
                        @Recipient.Name.First()
                    </MudAvatar>
                    <MudStack Class="mx-2" Spacing="0">
                        <MudText>@Recipient.Name</MudText>
                        <MudText Typo="Typo.caption">@Recipient.Role</MudText>
                    </MudStack>
                    <MudSpacer />
                    <MudIconButton OnClick="() => isOpen = false" Icon="@Icons.Material.Filled.Close" />
                </MudStack>

                <MudDivider />

                <div id="scrollContainer" class="m-2 flex flex-col gap-2 overflow-y-scroll h-[90vh] w-full">
                    @foreach (var chatMessage in Messages.OrderBy(x => x.Sent))
                    {
                        if (chatMessage.From.Id == ActiveUser.Id)
                        {
                            <MudTooltip Placement="Placement.Left" RootClass="self-end" Text="@chatMessage.Sent.ToString()">
                                <MudText Class="mud-primary text-white p-2 rounded-lg mr-2">@chatMessage.Message</MudText>
                            </MudTooltip>
                        }
                        else if (chatMessage.From.Id == Recipient.Id)
                        {
                            <MudTooltip Placement="Placement.Right" RootClass="self-start" Text="@chatMessage.Sent.ToString()">
                                <MudText Class="mud-secondary p-2 rounded-lg">@chatMessage.Message</MudText>
                            </MudTooltip>
                        }
                    }
                </div>

                <MudSpacer />

                <MudStack Spacing="0" Class="absolute bottom-0 right-0 w-full">
                    <MudDivider />
                    <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Class="p-4 bg-neutral-50">
                        <MudTextField Class="bg-white rounded !p-2" TextUpdateSuppression="false" Variant="Variant.Text" @bind-Value="MessageInput" Immediate OnKeyDown="OnSendEnter" Placeholder="Aa" />
                        <MudIconButton Disabled="string.IsNullOrEmpty(MessageInput)" Icon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="SendMessage" />
                    </MudStack>
                </MudStack>
            </MudStack>
        }
    </div>
}


<script>
    function scrollToBottom(elementId) {
    const container = document.getElementById(elementId);
    if (container) {
    container.scrollTop = container.scrollHeight;
    }
    }
</script>

@code {
    private bool isOpen = false;
    private List<ChatMessage> Messages = [];
    private User ActiveUser;
    private User Recipient;
    private string MessageInput = string.Empty;
    private ChatService ChatService;


    private HubConnection? HubConnection;

    private IEnumerable<UserWithLatestMessage> Users = [];

    private async Task ScrollToBottomAsync()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "scrollContainer");
    }

    private async Task SearchInputChanged(string input) 
    {
        if (string.IsNullOrEmpty(input))
        {
            Users = await ChatService.GetUsersWithLatestChat(x => x.Id != ActiveUser.Id, ActiveUser);
        }
        else 
        {
            Users = await ChatService.GetUsersWithLatestChat(x => x.Id != ActiveUser.Id && x.Name.Contains(input), ActiveUser);
        }

        StateHasChanged();
    }

    private async Task OnSendEnter(KeyboardEventArgs args) 
    {
        if (args.Key == "Enter") 
        {
            await SendMessage();
        }
    }

    private async Task ChangeRecipient(User user) 
    {
        Recipient = user;
        Messages = await ChatService.GetChatsByUsers(ActiveUser, Recipient);
        StateHasChanged();
        ScrollToBottomAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        ChatService = new ChatService(Context);
        
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string email = auth.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
        if (!string.IsNullOrEmpty(email))
        {
            HubConnection = new HubConnectionBuilder()
                .WithUrl("https://test.wcp.dk/chathub?user=" + email)
                .Build();

            HubConnection.On<ChatMessage>("ReceiveMessage", async (message) =>
            {
                await InvokeAsync(() =>
                {
                    // Update message in contact view
                    var user = Users.FirstOrDefault(x => x.User.Id == message.FromId);
                    if (user is not null)
                        user.LatestMessage = message;

                    if (Recipient is not null && Recipient.Id == message.FromId)
                        Messages.Add(message);

                    StateHasChanged();
                });
            });

            await HubConnection.StartAsync();
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrEmpty(MessageInput)) 
        {
            var msg = new ChatMessage { From = ActiveUser, To = Recipient, Message = MessageInput, Sent = DateTime.Now };
            await ChatService.SendChat(msg, HubConnection);
            Messages.Add(msg);
            MessageInput = string.Empty;

            // Update message in contact view
            var user = Users.FirstOrDefault(x => x.User.Id == msg.To.Id);
            if (user is not null)
                user.LatestMessage = msg;

            StateHasChanged();
            ScrollToBottomAsync();
        }
    }

    public static string GetTimeSpanString(TimeSpan timeSpan)
    {
        if (timeSpan.TotalMinutes < 1)
        {
            return "Nu";
        }
        else if (timeSpan.TotalMinutes < 60)
        {
            return $"{timeSpan.TotalMinutes:F0} min.";
        }
        else if (timeSpan.TotalHours < 24)
        {
            return $"{timeSpan.TotalHours:F0} t.";
        }
        else if (timeSpan.TotalDays < 7)
        {
            return $"{timeSpan.TotalDays:F0} d.";
        }
        else
        {
            return $"{timeSpan.Days / 7} u.";
        }
    }

    public async Task OpenChat() 
    {
        isOpen = !isOpen;

        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string email = auth.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
        ActiveUser = await Context.Users.SingleOrDefaultAsync(x => x.Email == email);
        Users = await ChatService.GetUsersWithLatestChat(x => x.Id != ActiveUser.Id, ActiveUser);
    }
}