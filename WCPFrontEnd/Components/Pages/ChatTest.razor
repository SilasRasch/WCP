@page "/chat"
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using WCPFrontEnd.Models
@using WCPFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities.UserModels
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWcpDbContext Context
@inject ChatService ChatService

<MudText>WC Chat</MudText>

<MudIconButton Icon="@Icons.Material.Filled.ChatBubble" OnClick="() => isOpen = !isOpen"></MudIconButton>

<MudPopover Open="@isOpen" Fixed AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" MaxHeight="720">
    @if (Recipient is null) 
    {
        @foreach (User user in AllUsers) 
        {
            <MudPaper Class="pa-2 cursor-pointer" onclick="@(() => ChangeRecipient(user))">
                <MudStack Row AlignItems="AlignItems.Center">
                    <MudAvatar Color="Color.Primary">
                        @user.Name.First()
                    </MudAvatar>
                    <MudStack Justify="Justify.Center" Spacing="0">
                        <MudText>@user.Name</MudText>
                        <MudText Typo="Typo.caption">Sidste chat</MudText>
                    </MudStack>
                </MudStack>
            </MudPaper>
        }
    }
    else 
    {
        <MudStack AlignItems="AlignItems.Start" Spacing="0">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="() => ChangeRecipient(null)" />
            <MudStack Row AlignItems="AlignItems.Center" Class="m-2">
                <MudAvatar Color="Color.Primary">
                    @Recipient.Name.First()
                </MudAvatar>
                <MudStack Justify="Justify.Center" Spacing="0">
                    <MudText>@Recipient.Name</MudText>
                </MudStack>
            </MudStack>

            
            <div>
                <ul>
                    @foreach (var chatMessage in Messages)
                    {
                        <li><b>@chatMessage.From.Name:</b> @chatMessage.Message</li>
                    }
                </ul>
            </div>
            <MudStack Row Spacing="0">
                <MudTextField Variant="Variant.Outlined" @bind-Value="MessageInput" Label="Besked" />
                <MudSpacer />
                <MudButton OnClick="SendMessage">Send</MudButton>
            </MudStack>
        </MudStack>
        
    }
</MudPopover>



@code {
    private bool isOpen = false;
    private List<ChatMessage> Messages = new();
    private User ActiveUser;
    private User Recipient;
    private string MessageInput = string.Empty;

    private IEnumerable<User> AllUsers = [];

    private HubConnection? HubConnection;

    private void ChangeRecipient(User user) 
    {
        Recipient = user;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string email = auth.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
        ActiveUser = await Context.Users.SingleOrDefaultAsync(x => x.Email == email);

        AllUsers = await Context.Users.ToListAsync();

        if (ActiveUser is not null)
        {
            HubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub?user=" + ActiveUser.Name))
            .Build();

            HubConnection.On<ChatMessage>("ReceiveMessage", async (message) =>
            {
                await InvokeAsync(() =>
                {
                    Messages.Add(message);
                    StateHasChanged();
                });
            });

            await HubConnection.StartAsync();
        }
    }

    private async Task SendMessage()
    {
        await ChatService.SendChat(new ChatMessage(), HubConnection);
    }

    // public override async ValueTask DisposeAsync()
    // {
    //     if (HubConnection is not null)
    //     {
    //         await HubConnection.DisposeAsync();
    //     }
    // }
}