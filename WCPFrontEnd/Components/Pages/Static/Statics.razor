@page "/statics"
@using System.Net.Http.Json
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Components.Shared
@using WCPShared.Interfaces
@using WCPShared.Models.Entities
@using WCPShared.Models.Views
@using WCPShared.Services.EntityFramework
@inject StaticTemplateService StaticTemplateService
@inject IDialogService DialogService
@inject IWcpDbContext Context
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Static Templates</PageTitle>

<MudDataGrid T="StaticTemplate" SelectOnRowClick="@_selectable" MultiSelection="@_selectable" Items="@StaticList" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter" Hideable="@_hidable" Striped="@_striped" Elevation="3"
    ColumnResizeMode="@(_resizable ? ResizeMode.Column : ResizeMode.None)" DragDropColumnReordering="_movable" FilterCaseSensitivity="DataGridFilterCaseSensitivity.Ignore">
    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">Static Templates</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="ToggleAddDialog"></MudIconButton>
        </MudStack>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudIconButton onclick="FetchStatics" Icon="@Icons.Material.Filled.Refresh" Class="hover:animate-spin-once"></MudIconButton>
        <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="ToggleOpenTableSettings" Class="hover:animate-spin-once"></MudIconButton>
        <MudPopover Open="@_open" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.BottomRight">
            <div class="d-flex flex-column">
                <MudText>Tabel-indstillinger</MudText>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_selectable" Color="Color.Primary">Selectable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_resizable" Color="Color.Primary">Resizable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_movable" Color="Color.Primary">Movable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_hidable" Color="Color.Primary">Hidable</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_striped" Color="Color.Primary">Zebra</MudSwitch>
                <MudDivider></MudDivider>
                <MudSwitch @bind-Value="_stickyActions" Color="Color.Primary">Sticky actions</MudSwitch>
                <MudDivider></MudDivider>

                <MudButton OnClick="@ToggleOpenTableSettings" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Luk</MudButton>
            </div>
        </MudPopover>
    </ToolBarContent>
    <Columns>
        @if (_selectable)
        {
            <SelectColumn T="StaticTemplate" />
        }
        <PropertyColumn Property="x => x.Id" Title="Id">
            <CellTemplate>
                <div @onclick="() => ToggleEditDialog(context.Item)" class="flex justify-center rounded-full w-10 p-2 cursor-pointer bg-red-500 text-white">
                    <MudText>@context.Item.Id</MudText>
                </div>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Name" Title="Navn" />
        <PropertyColumn Property="x => x.DisplayName" Title="Display Name" />

        <TemplateColumn Title="Actions" StickyRight="@_stickyActions">
            <CellTemplate>
                <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" AriaLabel="Åben aktionsmenu" AnchorOrigin="Origin.BottomCenter">
                    <MudMenuItem OnClick="(() => ToggleEditDialog(context.Item))">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Edit"></MudIcon>
                            <MudText>Rediger</MudText>
                        </MudStack>
                    </MudMenuItem>
                    <MudMenuItem OnClick="() => ToggleDeleteModal(context.Item.Id)">
                        <MudStack Row="true">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIcon>
                            <MudText>Slet</MudText>
                        </MudStack>
                    </MudMenuItem>
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="StaticTemplate" PageSizeOptions="[100, 200, 300, 400, 500]" RowsPerPageString="Rækker per side:" />
    </PagerContent>
</MudDataGrid>

@code {
    // Open table settings
    private bool _open = false;
    private bool _selectable = false;
    private bool _resizable = false;
    private bool _movable = false;
    private bool _hidable = false;
    private bool _striped = true;
    private bool _stickyActions = true;
    private bool _groupOrganization = false;

    private IEnumerable<StaticTemplate> StaticList = new List<StaticTemplate>();
    private string? _searchString;
    private List<string> _events = new();

    private Func<StaticTemplate, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{x.Name}{x.DisplayName}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override void OnInitialized()
    {
        FetchStatics();
    }

    private void FetchStatics()
    {
        StaticList = Context.StaticTemplates;
    }

    private async Task ToggleDeleteModal(int id)
    {
        var parameters = new DialogParameters<DeleteModal>
        {
            { x => x.Type, "template" }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteModal>("Delete dialog", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await StaticTemplateService.DeleteObject(id);
            FetchStatics();
        }
    }

    private async Task ToggleAddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<Dialoges.AddStaticDialog>("Add dialog", options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            FetchStatics();
    }

    private async Task ToggleEditDialog(StaticTemplate template)
    {
        var parameters = new DialogParameters<Dialoges.EditStaticDialog>
        {
            { x => x.Static, template }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<Dialoges.EditStaticDialog>("Delete dialog", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            FetchStatics();
    }

    private void ToggleOpenTableSettings() => _open = !_open;
}