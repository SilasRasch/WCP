@page "/project/{ProjectId:int}"

@using Microsoft.EntityFrameworkCore
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Components.Pages.ProjectPages.FileSystem
@using WCPFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities.ProjectModels
@using WCPShared.Models.Entities
@using WCPShared.Models.Enums
@inject ProjectService ProjectService
@inject IWcpDbContext Context

@if (Project is not null) 
{
    <MudPaper Class="pa-4">
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h5">
                @Project.Name
            </MudText>
            <MudSpacer />
            <AuthorizeView Roles="Admin">
                <MudIconButton OnClick="ToggleEditable" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
            </AuthorizeView>
        </MudStack>

        <AuthorizeView Roles="Admin">
            <MudTextField @bind-Value="@Project.InternalNotes" Label="Interne noter" ReadOnly="!_editable" AutoGrow />
        </AuthorizeView>

        <MudText Typo="Typo.h6" Class="mt-2">Projekt</MudText>

        <MudStack Row="true">
            <MudTextField Value="@Project.Id.ToString()" Label="Projekt ID" ReadOnly="true" />
            <MudTextField @bind-Value="@Project.Name" Label="Projektnavn" ReadOnly="!_editable" />
        </MudStack>

        @* <MudStack Row="true">
            <MudTextField @bind-Value="@Project.Amount" Label="Mængde af indhold" ReadOnly="!_editable" />
            <MudTextField @bind-Value="@Project.Formats" Label="Format" ReadOnly="!_editable" />
        </MudStack> *@


        @* <MudTextField @bind-Value="@Project.Platforms" Label="Tiltænkte platforme" ReadOnly="!_editable" /> *@
        <MudSelect @bind-Value="Project.Status" Label="Status" Placeholder="Vælg ny status" AnchorOrigin="Origin.BottomCenter" Disabled="!_editable">
            @foreach (ProjectStatus item in Enum.GetValues(typeof(ProjectStatus)))
            {
                <MudSelectItem Value="@item">@ProjectHelper.GetStatusString(item)</MudSelectItem>
            }
        </MudSelect>

        <MudText Typo="Typo.h6" Class="mt-2">Kontakt</MudText>

        <MudStack Row="true">
            <MudSelect @bind-Value="Project.Brand" Disabled="!_editable" Text="@($"{Project.Brand.Name} ({Project.Brand.Organization.Name})")" Label="Brand" Required="true" RequiredError="Dette felt er påkrævet" AnchorOrigin="Origin.BottomCenter" Placeholder="Vælg et brand">
                @foreach (Brand brand in Brands)
                {
                    <MudSelectItem Value="@brand">
                        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h6">@ProjectHelper.CountryStringToFlag(brand.Organization.Language.IsoLanguageCode) </MudText>
                            @brand.Name (@brand.Organization.Name)
                        </MudStack>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudTextField Value="@Project.Brand.URL" Label="URL" ReadOnly="true" />
        </MudStack>

        <MudText Typo="Typo.h6" Class="mt-2">Pris og leveringstid</MudText>
        <MudStack Row="true">
            <MudTextField @bind-Value="@Project.Price" Label="Pris" ReadOnly="!_editable" />
            <MudDatePicker @bind-Date="_deliveryDate" Label="Leveringsdato" Placeholder="Estimeret leveringsdato" DateFormat="dd.MM.yyyy" ReadOnly="!_editable"></MudDatePicker>
            <MudDatePicker @bind-Date="_createdDate" Label="Oprettet" Placeholder="Dato for oprettelse" DateFormat="dd.MM.yyyy" ReadOnly="!_editable"></MudDatePicker>
        </MudStack>
    </MudPaper>

    <MudPaper Class="pa-4 mt-2">
        <ProjectFileBar Project="Project" />
    </MudPaper>
}
else 
{
    <MudProgressCircular Indeterminate Color="Color.Primary" />
}


@code {
    [Parameter]
    public int ProjectId { get; set; }

    public Project? Project { get; set; }
    private List<Brand> Brands = [];

    private bool _editable = false;
    private DateTime? _deliveryDate = DateTime.Now;
    private DateTime? _createdDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        Project = await Context.Projects
            .Include(x => x.Concepts)
            .Include(x => x.Brand)
            .ThenInclude(x => x.Organization)
            .ThenInclude(x => x.Language)
            .SingleOrDefaultAsync(x => x.Id == ProjectId);
        _deliveryDate = Project.Deadline;
        _createdDate = Project.Created;
        Brands = await Context.Brands
            .Include(x => x.Organization)
            .ThenInclude(x => x.Language)
            .ToListAsync();
    }

    private async Task Submit()
    {
        if (_deliveryDate != DateTime.MinValue)
            Project.Deadline = _deliveryDate!.Value.AddHours(23).AddMinutes(59).AddSeconds(59);

        if (_createdDate != DateTime.MinValue)
            Project.Created = _createdDate!.Value;

        await ProjectService.UpdateObject(Project.Id, Project);
    }

    private void ToggleEditable()
    {
        _editable = !_editable;
    }
}
