@using Microsoft.EntityFrameworkCore
@using WCPFrontEnd.Components.Pages.ProductRelated
@using WCPFrontEnd.Components.Shared
@using WCPShared.Interfaces
@using WCPShared.Models.Entities
@using WCPShared.Models.Entities.ProjectModels
@inject IWcpDbContextFactory ContextFactory
@inject IDialogService DialogService

<MudText Class="text-center" Typo="Typo.h6">Produkt</MudText>
<MudStack Spacing="4" Class="mt-4">

    <MudSelect @ref="productSelect" Required ValueChanged="@(EventCallback.Factory.Create<Product>(this, ProductSelectChanged))" Label="Produkt" Value="Project.Product" Clearable Text="@ProductToString(Project.Product)" ToStringFunc="ProductToString" AnchorOrigin="Origin.BottomCenter">
        @foreach (Product product in Products) 
        {
            <MudSelectItem Value="@product" Class="p-2 cursor-pointer text-primary">@product.Name</MudSelectItem>
        }
        <MudSelectItem Value="@((Product)null)" Class="p-2 cursor-pointer text-primary">Opret nyt produkt</MudSelectItem>
    </MudSelect>

    @if (Project is CreatorProject creatorProject) 
    {
        <MudStack Spacing="1">
            <MudText Typo="Typo.caption">Må creator beholde produktet?</MudText>

            <MudStack>
                <MudButton @onclick="() => creatorProject.CreatorKeepsProduct = !creatorProject.CreatorKeepsProduct" Color="@(creatorProject.CreatorKeepsProduct ? Color.Success : Color.Primary)"
                Variant="Variant.Filled" Class="text-white rounded-lg" Spacing="0" Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                    <MudText>@(creatorProject.CreatorKeepsProduct ? "Ja - giv en anslået værdi" : "Nej - husk at sende returlabel med")</MudText>
                </MudButton>

                @if (Project.Product is not null && creatorProject.CreatorKeepsProduct) 
                {
                    <MudTextField Label="Anslået værdi" @bind-Value="creatorProject.Product.Value" Required RequiredError="Dette felt er påkrævet" />
                }
            </MudStack>
        </MudStack>
    }
</MudStack> 

@code {
    [Parameter]
    public Project Project
    {
        get { return _project; }
        set
        {
            if (_project == value) return;

            _project = value;
            ProjectChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<Project> ProjectChanged { get; set; }
    private Project _project;

    private MudSelect<Product> productSelect;

    private IEnumerable<Product> Products = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Project.Brand is not null) 
        {
            using (IWcpDbContext context = ContextFactory.CreateDbContext())
            {
                Products = await context.Products.Where(x => x.BrandId == Project.Brand.Id).AsNoTracking().ToListAsync();
            }
        }
    }

    private string ProductToString(Product product) => product is not null ? product.Name : string.Empty;

    private async Task ProductSelectChanged(Product product) 
    {
        if (product is null)
        {
            await OpenAddProductDialog();
        }
        else
        {
            Project.Product = product;
        }
    }

    private async Task OpenAddProductDialog()
    {
        await productSelect.CloseMenu();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters<WCPFrontEnd.Components.Pages.ProductRelated.Dialoges.AddProductDialog>
        {
            { x => x.Brand, Project.Brand }
        };

        var dialog = await DialogService.ShowAsync<WCPFrontEnd.Components.Pages.ProductRelated.Dialoges.AddProductDialog>("Add product dialog", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is Product addedProduct)
        {
            Project.Product = addedProduct;
            using (IWcpDbContext context = ContextFactory.CreateDbContext())
            {
                Products = await context.Products.Where(x => x.BrandId == Project.Brand.Id).AsNoTracking().ToListAsync();
            }
        }
    }
}
