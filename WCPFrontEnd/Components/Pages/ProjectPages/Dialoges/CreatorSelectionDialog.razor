@using Microsoft.EntityFrameworkCore
@using WCPAdminFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Models.Entities.ProjectModels
@using WCPShared.Services.EntityFramework
@using WCPFrontEnd.Components.Shared
@inject IWcpDbContext Context

<MudDialog>
    <TitleContent>
        <MudStack Row="true">
            <MudText Typo="Typo.h6">
                @Project.Name - Creators
            </MudText>
            <MudSpacer />
            <MudIconButton OnClick="ToggleEditable" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
        </MudStack>

    </TitleContent>
    <DialogContent>
        <MudStack Row="true">
            <MudTextField Value="@Project.Id.ToString()" Label="Projekt ID" ReadOnly="true" />
            <MudTextField Value="@Project.Name" Label="Projektnavn" ReadOnly="true" />
        </MudStack>

        <MudStack Class="mt-2" Spacing="1">
            @foreach (var participation in Project.Participations)
            {
                if (participation is not null && participation.Creator is not null) 
                {
                    <CreatorComponent Creator="participation.Creator" Participation="participation" RemoveCreator="CallbackRemoveCreator" Editable="_editable"></CreatorComponent>
                }
            }

            @if (_editable)
            {
                <div class="flex justify-center mud-secondary rounded-lg p-2">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="ToggleAdding"></MudIconButton>
                </div>
            }
        </MudStack>

        @if (_adding && _editable && AllCreators.Count() > 0)
        {
            <MudStack Row="true" Class="mt-2">
                <MudText Typo="Typo.h6">Creator-katalog</MudText>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudStack>

            <MudStack Spacing="1" Class="mt-1">
                @foreach (var creator in AllCreators.Where(x => Filter(x)))
                {
                    <CreatorComponent Creator="creator" AddCreator="CallbackAddCreator" Addable="true"></CreatorComponent>
                }
            </MudStack>
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Error"><MudIcon Icon="@Icons.Material.Filled.Cancel" Class="mr-2" /> Annuller</MudButton>

        @if (_editable)
        {
            <MudButton OnClick="Submit" Color="Color.Success"><MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-2" /> Gem</MudButton>
        }

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public CreatorProject Project { get; set; }

    private IEnumerable<Creator> AllCreators { get; set; } = new List<Creator>();
    private bool _editable = false;
    private bool _adding = false;
    private string? _searchString;

    protected override void OnInitialized()
    {
        AllCreators = Context.Creators
            .Include(x => x.Languages)
            .Include(x => x.User)
            .Where(x => x.User.IsActive)
            .ToList();
    }

    private async Task Submit()
    {
        await Context.SaveChangesAsync();
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void ToggleAdding()
    {
        if (_adding == false)
        {
            AllCreators = AllCreators.Where(x => !Project.Participations.Any(c => c.CreatorId == x.Id));
        }

        _adding = !_adding;
    }

    private bool Filter(Creator creator)
    {
        if (Project.Participations.Any(x => x.CreatorId == creator.Id))
            return false;

        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{creator.User.Name} {creator.Id} {creator.User.Email} {creator.Gender} {creator.User.Phone} {creator.SubType.ToString()}".Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void CallbackRemoveCreator(CreatorParticipation participation) 
    {
        Project.Participations.Remove(participation);
        StateHasChanged();
    }

    private void CallbackAddCreator(Creator creator)
    {
        Project.Participations.Add(new CreatorParticipation
        {
            Creator = creator,
            Project = null,
            CreatorId = creator.Id,
            ProjectId = Project.Id,
            HasDelivered = false,
            Salary = 0
        });
        StateHasChanged();
    }

    private void Cancel() => MudDialog.Cancel();
    private void ToggleEditable() => _editable = !_editable;
}

