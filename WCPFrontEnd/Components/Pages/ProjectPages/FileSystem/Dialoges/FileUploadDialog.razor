@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Services
@using WCPShared.Models.Entities
@using WCPShared.Models.Entities.ProjectModels
@using WCPShared.Models.Enums
@using WCPShared.Models.Views
@using WCPShared.Services
@using WCPShared.Services.EntityFramework
@inject ProjectService ProjectService
@inject S3Service S3Service

<MudDialog ContentClass="p-2">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Upload filer (@Category)
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="0" MinWidth="256px">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="w-full">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="SyncFiles">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                            Vælg filer
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>

                @if (Files.Count > 0) 
                {
                    <MudDataGrid Items="@Files" Elevation="0">
                        <Columns>
                            <PropertyColumn Property="x => x.ContentType" Title="Filtype" Sortable="false" />
                            <PropertyColumn Property="x => x.Name" Title="Navn" Sortable="false" />
                            <PropertyColumn Property="x => x.Size" Title="Størrelse" Sortable="false">
                                <CellTemplate>@(context.Item.Size / 1024) KB</CellTemplate>
                            </PropertyColumn>
                            <TemplateColumn>
                                <CellTemplate>
                                    <MudIconButton OnClick="() => RemoveFile(context.Item)" Class="-py-2" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                }
            </MudStack>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Error"><MudIcon Icon="@Icons.Material.Filled.Cancel" Class="mr-2" /> Annuller</MudButton>
        <MudButton OnClick="Submit" Color="Color.Success"><MudIcon Icon="@Icons.Material.Filled.Upload" Class="mr-2" /> Upload</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Project Project { get; set; }

    [Parameter]
    public int Category { get; set; }

    private List<IBrowserFile> Files { get; set; } = [];

    private async void Submit()
    {
        // Scripts
        if (Category == 0) 
        {
            if (Project is CreatorProject creatorProject) 
            {
                List<string> fileUrls = [];

                foreach (IBrowserFile file in Files)
                {
                    string url = await S3Service.UploadScript(file, Project);
                    fileUrls.Add(url);
                }

                creatorProject.Scripts.AddRange(fileUrls);
            }
        }

        // Creator
        if (Category == 1)
        {
            if (Project is CreatorProject creatorProject)
            {
                List<string> audioUrls = [];
                List<string> visualUrls = [];

                // TODO: Omdøbning af filer
                foreach (IBrowserFile file in Files)
                {
                    if (file.ContentType.Contains("video")) 
                    {
                        string url = await S3Service.UploadCreatorVideo(file, Project, "change me", "visuals");
                        visualUrls.Add(url);
                        break;
                    }
                    if (file.ContentType.Contains("image"))
                    {
                        string url = await S3Service.UploadCreatorImage(file, Project, "change me", "visuals");
                        visualUrls.Add(url);
                        break;
                    }
                    if (file.ContentType.Contains("audio"))
                    {
                        string url = await S3Service.UploadCreatorVoiceover(file, Project, "change me", "audio");
                        audioUrls.Add(url);
                        break;
                    }
                }

                creatorProject.CreatorVisuals.AddRange(visualUrls);
                creatorProject.CreatorAudio.AddRange(audioUrls);
            }
        }

        // Product
        if (Category == 2)
        {
            List<string> fileUrls = [];

            foreach (IBrowserFile file in Files)
            {
                string url = await S3Service.UploadFinalContent(file, Project, "FORMAT", Project.FinalContent.Count + 1);
                fileUrls.Add(url);
            }

            Project.FinalContent.AddRange(fileUrls);
        }

        // Other
        if (Category == 3)
        {
            List<string> fileUrls = [];

            foreach (IBrowserFile file in Files) 
            {
                string url = await S3Service.UploadOtherFile(file, Project);
                fileUrls.Add(url);
            }

            Project.OtherFiles.AddRange(fileUrls);
        }

        // await ProjectService.UpdateObject(Project.Id, Project);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();

    private void SyncFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            this.Files.Add(file);
        }
    }

    private void RemoveFile(IBrowserFile file) 
    {
        Files.Remove(file);
    }
}

