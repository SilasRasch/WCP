@using System.Text.RegularExpressions
@using WCPFrontEnd.Services
@using WCPShared.Models.Entities.ProjectModels
@using WCPShared.Services
@inject IDialogService DialogService
@inject S3Service S3Service
@inject ProjectService ProjectService

@* Breadcrumbs *@
<MudStack Row Class="mt-2">
    <MudText Class="cursor-pointer" @onclick="@(() => GoToPath(string.Empty))">Home</MudText>

    @if (!string.IsNullOrEmpty(_path)) 
    {
        @for (int i = 0; i < _path.Split('/').Length; i++)
        {
            string str = _path.Split('/')[i];
            string fullPath = string.Join('/', _path.Split('/').Take(i + 1));
            <MudText>/</MudText>
            <MudText Class="cursor-pointer" @onclick="@(() => GoToPath(fullPath))">
                @(str.Trim().First().ToString().ToUpper() + str.Substring(1))
            </MudText>
        }
    }
</MudStack>

<MudGrid Spacing="0" Justify="Justify.Center" Class="my-2 p-4 mud-secondary rounded-lg gap-2">
    @* Home *@
    @if (_path == string.Empty) 
    {
        if (Project is CreatorProject) 
        {
            <AuthorizeView Roles="Admin, Creator">
                <MudFab StartIcon="@Icons.Material.Filled.Folder" IconSize="Size.Large" Class="mud-background" Label="Scripts" OnClick="@(() => GoToPath("scripts"))" />
                <MudFab StartIcon="@Icons.Material.Filled.Folder" IconSize="Size.Large" Class="mud-background" Label="Content" OnClick="@(() => GoToPath("content"))" />
            </AuthorizeView>
        }

        <MudFab StartIcon="@Icons.Material.Filled.Folder" IconSize="Size.Large" Class="mud-background" Label="Product" OnClick="@(() => GoToPath("product"))" />
        <MudFab StartIcon="@Icons.Material.Filled.Folder" IconSize="Size.Large" Class="mud-background" Label="Other" OnClick="@(() => GoToPath("other"))" />
    }

    <AuthorizeView Roles="Admin, Creator">
        @if (Project is CreatorProject creatorProject)
        {
            @* Scripts *@
            @if (_path == "scripts")
            {
                @foreach (string str in Project.Files.Where(x => x.Contains(_path)))
                {
                    <FileElement FileUri="@str" Project="Project" Delete="DeleteFile" Rename="RenameFile" />
                }

                <MudFab StartIcon="@Icons.Material.Filled.Upload" IconSize="Size.Large" Class="mud-background" Label="Upload" @onclick="@(() => ToggleUploadDialog(GetAcceptString()))" />
            }

            @* Creator content *@
            @if (_path == "content")
            {
                for (int i = 1; i <= Project.Amount; i++)
                {
                    <MudFab StartIcon="@Icons.Material.Filled.Folder" IconSize="Size.Large" Class="mud-background" Label="@($"Content {i}")" OnClick="@(() => GoToPath("content/" + i))" />
                }
            }

            if (Regex.IsMatch(_path, @"^content\/\d{1,2}$"))
            {
                <MudFab StartIcon="@Icons.Material.Filled.Folder" IconSize="Size.Large" Class="mud-background" Label="Audio" OnClick="@(() => GoToPath(_path + "/audio"))" />
                <MudFab StartIcon="@Icons.Material.Filled.Folder" IconSize="Size.Large" Class="mud-background" Label="Visuals" OnClick="@(() => GoToPath(_path + "/visuals"))" />
            }

            if (Regex.IsMatch(_path, @"^content\/\d{1,2}\/"))
            {
                @foreach (string str in Project.Files.Where(x => x.Contains(_path)))
                {
                    <FileElement FileUri="@str" Project="Project" Delete="DeleteFile" Rename="RenameFile" />
                }
                <MudFab StartIcon="@Icons.Material.Filled.Upload" IconSize="Size.Large" Class="mud-background" Label="Upload" @onclick="@(() => ToggleUploadDialog(GetAcceptString()))" />
            }
        }
    </AuthorizeView>

    
    @* Product *@
    @if (_path == "product")
    {
        @foreach (string str in Project.Formats.Trim().Split(','))
        {
            <MudFab StartIcon="@Icons.Material.Filled.Folder" IconSize="Size.Large" Class="mud-background" Label="@str" OnClick="@(() => GoToPath($"product/{str}"))" />
        }
    }

    @if (_path.Contains("product/"))
    {
        @foreach (string str in Project.Files.Where(x => x.Contains(_path)))
        {
            <FileElement FileUri="@str" Project="Project" Delete="DeleteFile" Rename="RenameFile" />
        }
        <MudFab StartIcon="@Icons.Material.Filled.Upload" IconSize="Size.Large" Class="mud-background" Label="Upload" @onclick="@(() => ToggleUploadDialog(GetAcceptString()))" />
    }
    
    @* Other files *@
    @if (_path == "other")
    {
        @foreach (string str in Project.Files.Where(x => x.Contains(_path)))
        {
            <FileElement FileUri="@str" Project="Project" Delete="DeleteFile" Rename="RenameFile" />
        }
        <MudFab StartIcon="@Icons.Material.Filled.Upload" IconSize="Size.Large" Class="mud-background" Label="Upload" @onclick="@(() => ToggleUploadDialog(GetAcceptString()))" />
    }
</MudGrid>

@code {
    [Parameter]
    public Project Project { get; set; }

    private int _tabIndex;
    private string _path = string.Empty;

    private void GoToPath(string path) 
    {
        _path = path;
    }

    private string? GetAcceptString()
    {
        if (_path.Contains("visuals")) return "video/*,image/*";
        if (_path.Contains("audio")) return "audio/*";
        if (_path.Contains("scripts")) return ".doc,.docx,application/msword";
        return null;
    }

    private async Task ToggleUploadDialog(string contentType)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<Dialoges.FileUploadDialog>()
        {
            { x => x.Path, _path },
            { x => x.Project, Project },
            { x => x.ContentType, contentType }
        };

        var dialog = await DialogService.ShowAsync<Dialoges.FileUploadDialog>("FileUploadDialog", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
            StateHasChanged();
    }

    private async Task DeleteFile(string fileUri)
    {
        await S3Service.DeleteFile(fileUri);
        Project.Files.Remove(fileUri);
        await ProjectService.UpdateObject(Project.Id, Project);
        StateHasChanged();
    }

    private async Task RenameFile((string, string) args)
    {
        string newUri = await S3Service.RenameFile(args.Item1, args.Item2);

        if (!string.IsNullOrEmpty(newUri)) 
        {
            Project.Files.Remove(args.Item1);
            Project.Files.Add(newUri);

            await ProjectService.UpdateObject(Project.Id, Project);
            StateHasChanged();
        }
    }
}