@page "/new-project"
@using Microsoft.EntityFrameworkCore
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Components.Pages.ProjectPages.ProjectSteps
@using WCPFrontEnd.Components.Shared
@using WCPFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities.ProjectModels
@using WCPShared.Models.Entities
@using WCPShared.Models.Entities.ProjectModels.Concepts
@using WCPShared.Models.Enums
@inject IWcpDbContext Context
@inject ProjectService ProjectService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudStack Class="w-full h-full" AlignItems="AlignItems.Center">
    <MudPaper Class="pa-4" MinHeight="86vh" MaxWidth="72rem">
        <MudForm @ref="form" @bind-IsValid="_success" @bind-Errors="_errors">
            <MudStepper @bind-ActiveIndex="_index">
                <ChildContent>
                    <MudStep Title="Grundinformation">
                        <MudText Class="text-center" Typo="Typo.h6">Grundinformation</MudText>
                        <MudStack Spacing="4">
                            <MudSelect @bind-Value="Project.Brand" ToStringFunc="BrandToStringFunc" Clearable Label="Brand" Required="true" RequiredError="Dette felt er påkrævet" AnchorOrigin="Origin.BottomCenter" Placeholder="Vælg et brand">
                                @foreach (Brand brand in Brands)
                                {
                                    <MudSelectItem Value="@brand">
                                        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                            <MudText Typo="Typo.h6">@ProjectHelper.CountryStringToFlag(brand.Organization.Language.IsoLanguageCode) </MudText>
                                            @brand.Name (@brand.Organization.Name.Trim())
                                        </MudStack>
                                    </MudSelectItem>
                                }
                            </MudSelect>

                            <MudTextField @bind-Value="@Project.Name" Label="Projektnavn" Placeholder="Noget deskriptivt" Required RequiredError="Dette felt er påkrævet" />

                            <MudStack Spacing="1" Justify="Justify.FlexStart">
                                <MudText>Projekttype*</MudText>
                                <MudStack Row Justify="Justify.SpaceEvenly" Spacing="8">
                                    <MudButton OnClick="() => ChangeProjectType(ProjectType.UGC)" Variant="Variant.Filled" Class="@(Project.Type == ProjectType.UGC ? "w-[200px] h-[200px] mud-secondary brightness-90" : "w-[200px] h-[200px] mud-secondary")">
                                        <MudStack Class="w-full h-full mud-text-primary" Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.OndemandVideo" />
                                            <MudText Typo="Typo.h6">UGC</MudText>
                                        </MudStack>
                                    </MudButton>
                                    <MudButton OnClick="() => ChangeProjectType(ProjectType.Statics)" Variant="Variant.Filled" Class="@(Project.Type == ProjectType.Statics ? "w-[200px] h-[200px] mud-secondary brightness-90" : "w-[200px] h-[200px] mud-secondary")">
                                        <MudStack Class="w-full h-full mud-text-primary" Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.PhotoAlbum" />
                                            <MudText Typo="Typo.h6">Statics</MudText>
                                        </MudStack>
                                    </MudButton>
                                    <MudButton OnClick="() => ChangeProjectType(ProjectType.Photos)" Variant="Variant.Filled" Class="@(Project.Type == ProjectType.Photos ? "w-[200px] h-[200px] mud-secondary brightness-90" : "w-[200px] h-[200px] mud-secondary")">
                                        <MudStack Class="w-full h-full mud-text-primary" Spacing="0" Justify="Justify.Center" AlignItems="AlignItems.Center">
                                            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Photo" />
                                            <MudText Typo="Typo.h6">Fotos</MudText>
                                        </MudStack>
                                    </MudButton>
                                </MudStack>
                            </MudStack>
                        </MudStack>
                    </MudStep>

                    <MudStep Title="Koncepter">
                        <MudText Class="text-center" Typo="Typo.h6">Koncepter</MudText>

                        

                        <MudStack>
                            @* TODO: make collapsible *@
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddConcept" Class="w-fit">Tilføj koncept</MudButton>
                            <ProjectConceptPage @bind-Project="Project" Context="Context" />
                        </MudStack>
                    </MudStep>

                    <MudStep Title="Overblik">
                        <ProjectOverviewStep @bind-Project="Project" />
                    </MudStep>
                </ChildContent>

                <ActionContent Context="stepper">
                    @if (!_completed)
                    {
                        <MudIconButton OnClick="@(() => stepper.PreviousStepAsync())" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Disabled="@(_index <= 0)" />
                        <MudSpacer />

                        @if (stepper.Steps[_index] == stepper.Steps.Last())
                        {
                            @* <MudButton Disabled="@(!_success)" OnClick="SendProject" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Done" Color="Color.Primary">Send</MudButton> *@
                            <MudButton OnClick="SendProject" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Done" Color="Color.Primary">Send</MudButton>
                        }
                        else
                        {
                            <MudIconButton OnClick="@(() => stepper.NextStepAsync())" Icon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" />
                        }
                    }
                </ActionContent>
            </MudStepper>
        </MudForm>
    </MudPaper>
</MudStack>


@code {
    private class StepComponent
    {
        public string Label { get; set; }
        public RenderFragment Component { get; set; }
    }

    private int _index;
    private bool _completed;
    private Project Project = new Project();
    private IEnumerable<Brand> Brands = [];

    private List<string> Formats = [];

    private MudForm form;
    private bool _success;
    private string[] _errors = {};

    private void ToggleFormat(string format, Concept concept) 
    {
        if (!concept.Formats.Contains(format)) concept.Formats.Add(format);
        else concept.Formats.Remove(format);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Project.Type = ProjectType.UGC;
        AddConcept(); // Add base concept

        var orgId = 1;
        Brands = await Context.Brands
            .Include(x => x.Organization)
            .ThenInclude(x => x.Language)
            .Where(x => x.OrganizationId == orgId)
            .ToListAsync();
    }

    private void ChangeProjectType(ProjectType type)
    {
        Project.Type = type;
        ResetConcepts();
    }

    private string BrandToStringFunc(Brand brand) => brand is not null && 
        brand.Organization is not null && !string.IsNullOrEmpty(brand.Organization.Name) ? $"{brand.Name} ({brand.Organization.Name})" : "";

    private async Task SendProject() 
    {
        // foreach (var concept in Project.Concepts) 
        // {
        //     if (concept.Product is not null) Context.Products.Attach(concept.Product);
        // }

        await ProjectService.AddObject(Project);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
        Snackbar.Add("Nyt projekt tilføjet: " + Project.Name);
        Navigation.NavigateTo("/projects");
    }

    private void ResetConcepts() 
    {
        Project.Concepts = new List<Concept>();
        AddConcept();
    }

    private void AddConcept() 
    {
        if (Project.Type == ProjectType.UGC) Project.Concepts.Add(new UgcConcept());
        if (Project.Type == ProjectType.Statics) Project.Concepts.Add(new StaticConcept());
        if (Project.Type == ProjectType.Photos) Project.Concepts.Add(new PhotoConcept());
    }
}