@using Microsoft.EntityFrameworkCore
@using Stripe
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Interfaces.Auth
@using WCPShared.Models.DTOs
@using WCPShared.Models.Entities.AuthModels
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Models.Enums
@using WCPShared.Models.Views
@using WCPShared.Models.Entities
@using WCPShared.Services
@using WCPShared.Services.EntityFramework
@using WCPShared.Services.StaticHelpers
@inject IWcpDbContext Context
@inject StripeService StripeService
@inject IConfiguration Configuration
@inject IJSRuntime JS

<MudDialog TitleClass="!p-0 mb-2">
    <TitleContent>
        <MudStack Spacing="0" Class="px-4 pt-4 pb-2">
            <span class="font-medium text-xl">Tilføj betalingsmiddel</span>
            <span class="text-neutral-400 text-lg">Vi understøtter kun betalingskort</span>
        </MudStack>
        <MudDivider />
    </TitleContent>
    <DialogContent>

        <MudGrid>
            <MudItem xs="12">
                <div id="card-element"></div>
                <p>@Message</p>
            </MudItem>
        </MudGrid>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Luk</MudButton>
        <MudButton Color="@Color.Primary" Class="rounded-lg" Variant="Variant.Filled" OnClick="SubmitPayment">Tilføj</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public User User { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private string? Message;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var publishableKey = Secrets.GetStripePublishableKey(Configuration);
            await JS.InvokeVoidAsync("initializeStripe", publishableKey);
        }
    }

    private async Task SubmitPayment()
    {
        string paymentMethodId = await JS.InvokeAsync<string>("processStripePayment");

        if (!string.IsNullOrEmpty(paymentMethodId))
        {
            try
            {
                var paymentMethodService = new PaymentMethodService();

                // Attach the payment method to the customer
                paymentMethodService.Attach(paymentMethodId, new PaymentMethodAttachOptions
                {
                    Customer = User.Organization!.StripeAccountId
                });

                MudDialog.Close();
            }
            catch (Exception ex)
            {
                Message = $"Error: {ex.Message}";
            }
        }
        else
        {
            Message = "Failed to retrieve payment method.";
        }
    }
}