@page "/login"
@attribute [ExcludeFromInteractiveRouting]
@using Microsoft.EntityFrameworkCore
@using WCPFrontEnd.Services
@using WCPShared.Models.Entities
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using WCPShared.Interfaces
@using WCPShared.Models.Entities.AuthModels
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Models.Enums
@using WCPShared.Services
@inject NavigationManager NavigationManager
@inject IWcpDbContext Context
@inject StripeService StripeService
@inject ApplicationState ApplicationState

<div class="grid justify-center gap-2 pt-4 pb-4">

    <MudPaper>
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm" class="p-8 rounded-md flex flex-column gap-2 mud-secondary">
            <DataAnnotationsValidator />
            <div class="font-semibold">
                Login
            </div>
            <div class="grid">
                <InputText @bind-Value="Model.Email" class="p-2 rounded-lg" placeholder="Email" />
                <ValidationMessage For="() => Model.Email" class="text-red-600" />
            </div>
            <div class="grid">
                <InputText type="password" @bind-Value="Model.Password" class="p-2 rounded-lg" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" class="text-red-600" />
            </div>

            @if (errorMessage is not null)
            {
                <span class="text-red-600 mt-2">@errorMessage</span>
            }

            <hr />

            <button type="submit" class="rounded-lg p-2 bg-green-500 text-white hover:bg-green-600 duration-200">Login</button>
        </EditForm>
    </MudPaper>

</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public UserDto Model { get; set; } = new();
    private string? errorMessage;

    private MudForm _form;
    private bool _success;
    private string[] _errors = { };

    private async Task Authenticate()
    {
        User? user = await Context.Users
            .Include(x => x.Organization)
            .SingleOrDefaultAsync(x => x.Email == Model.Email);

        if (user is null || !BCrypt.Net.BCrypt.Verify(Model.Password, user.PasswordHash)) 
        {
            errorMessage = "Invalid email or password";
            return;
        }

        if (!user.IsActive)
        {
            errorMessage = "User deactivated";
            return;
        }

        List<Claim> claims = new List<Claim>()
        {
            new Claim("Id", user.Id.ToString()),
            new Claim(ClaimTypes.Email, user.Email),
            new Claim(ClaimTypes.Name, user.Name),
            new Claim(ClaimTypes.Role, user.Role.ToString()),
        };

        if (user.Role == UserRole.Bruger && (user.Organization is null || !user.Organization.IsActive || string.IsNullOrEmpty(user.Organization.StripeAccountId)))
            claims.Add(new Claim("IsNotSubscribed", string.Empty));
        else if (user.Role == UserRole.Bruger && (user.Organization is not null && user.Organization.IsActive && !string.IsNullOrEmpty(user.Organization.StripeAccountId)))
            claims.Add(new Claim("StripeAccountId", user.Organization.StripeAccountId));

        if (user.Role == UserRole.Creator) 
        {
            Creator? creator = await Context.Creators.SingleOrDefaultAsync(x => x.UserId == user.Id);
            if (creator is not null) 
            {
                if (string.IsNullOrEmpty(creator.StripeAccountId))
                    claims.Add(new Claim("IsNotStripeConnected", string.Empty));
                else {
                    claims.Add(new Claim("StripeAccountId", creator.StripeAccountId));

                    // Display onboarding incomplete
                    if (!await StripeService.CheckOnboardingStatus(creator.StripeAccountId)) 
                    {
                        claims.Add(new Claim("OnboardingIncomplete", string.Empty));
                    }
                }

                claims.Add(new Claim("SubType", creator.SubType.ToString()));
                claims.Add(new Claim("CreatorId", creator.Id.ToString()));
            }
        }

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        ApplicationState.UnloadData();
        await HttpContext!.SignInAsync(principal);

        NavigationManager.NavigateTo("/");
    }
}