@page "/profile"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using WCPAdminFrontEnd.Services
@using WCPFrontEnd.Components.Shared
@using WCPFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Models.Enums
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWcpDbContext Context

<MudTabs Outlined="true" Position="Position.Left" Rounded Border
ApplyEffectsToContainer="true" PanelClass="pa-4">
    <MudTabPanel Text="Brugerprofil">
        <MudStack Class="w-full" Spacing="0">
            <MudText Typo="Typo.h6">Brugerprofil</MudText>
            <MudDivider Class="mb-2" />

            @if (User is not null)
            {
                <MudStack>
                    <MudTextField T="string" @bind-Value="User.Email" Label="Email" Required="true" Validation="@(new Func<string, string>(ValidationHelpers.EmailValidation))" RequiredError="Dette felt er påkrævet" />
                    <MudTextField T="string" @bind-Value="User.Name" Label="Navn" Validation="@(new Func<string, string>(ValidationHelpers.NameValidation))" RequiredError="Dette felt er påkrævet" />
                    <MudTextField T="string" @bind-Value="User.Phone" Label="Telefon" Validation="@(new Func<string, string>(ValidationHelpers.PhoneValidation))" RequiredError="Dette felt er påkrævet" />
                    <MudSelect @bind-Value="User.Language" ToStringFunc="(e) => ProjectHelper.LanguageToStringFlag(e)" Delimiter=" " Label="Nationalitet" Required RequiredError="Dette felt er påkrævet" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var lang in _languages)
                        {
                            <MudSelectItem Value="@lang">@ProjectHelper.CountryStringToFlag(lang.IsoLanguageCode) @lang.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            <MudButton OnClick="SaveChanges" Color="Color.Success" Variant="Variant.Filled" Class="mt-2" StartIcon="@Icons.Material.Filled.Save">Gem ændringer</MudButton>

            @if (HasBeenSaved)
            {
                <MudPaper Class="pa-4 mt-2 mud-success">
                    <MudText Class="text-white">Dine ændringer er blevet gemt</MudText>
                </MudPaper>
            }
        </MudStack>

    </MudTabPanel>
    <AuthorizeView Roles="Bruger">
        <MudTabPanel Text="Abonnement">
            <MudStack Class="w-full" Spacing="0">
                <MudText Typo="Typo.h6">Abonnement</MudText>
                <MudDivider Class="mb-2" />
                <SubscriptionPage Customer="User" />
            </MudStack>
        </MudTabPanel>
    </AuthorizeView>

    <AuthorizeView Context="authcontext" Roles="Creator">
        @if (Creator is not null) 
        {
            <MudTabPanel Text="Creatorprofil">
                <MudStack Class="w-full" Spacing="0">
                    <MudText Typo="Typo.h6">Creatorprofil</MudText>
                    <MudDivider Class="mb-2" />

                    <MudStack>
                        <MudTextField @bind-Value="Creator.Address" Placeholder="Adressen forsendelser bliver sendt til" Label="Adresse" Required RequiredError="Dette felt er påkrævet" />
                        <MudDatePicker Label="Fødselsdag" @bind-Date="Creator.DateOfBirth" Required="Creator.SubType == CreatorSubType.UGC" DateFormat="dd.MM.yyyy"></MudDatePicker>
                        <MudSelect @bind-Value="Creator.Gender" Label="Køn" Required RequiredError="Dette felt er påkrævet" AnchorOrigin="Origin.BottomCenter" Placeholder="Vælg et køn">
                            <MudSelectItem Value="@("Mand")">Mand</MudSelectItem>
                            <MudSelectItem Value="@("Kvinde")">Kvinde</MudSelectItem>
                        </MudSelect>
                        <MultiLanguageSelector @bind-Value="_selectedLanguages" />
                        <MudSelect T="string" MultiSelection @bind-SelectedValues="Creator.Tags" Label="Kategori" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@("Beauty")">Beauty</MudSelectItem>
                            <MudSelectItem Value="@("Fashion")">Fashion</MudSelectItem>
                            <MudSelectItem Value="@("Home")">Home</MudSelectItem>
                            <MudSelectItem Value="@("Lifestyle")">Lifestyle</MudSelectItem>
                            <MudSelectItem Value="@("Technology")">Technology</MudSelectItem>
                        </MudSelect>

                        <MudSelect Label="Budget" @bind-Value="Creator.PriceEstimate" ToStringFunc="ProjectHelper.LongArrayToStringFunc" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@(new long[] { 150, 250 })">150-250</MudSelectItem>
                            <MudSelectItem Value="@(new long[] { 250, 350 })">250-350</MudSelectItem>
                            <MudSelectItem Value="@(new long[] { 350, 500 })">350-500</MudSelectItem>
                            <MudSelectItem Value="@(new long[] { 500, 700 })">500-700</MudSelectItem>
                            <MudSelectItem Value="@(new long[] { 700 })">700+</MudSelectItem>
                        </MudSelect>

                        <MudStack Class="mt-2" Row AlignItems="AlignItems.Center">
                            <MudText>God pris</MudText>
                            <MudProgressLinear Color="@GetEstimateBarColor(CalculateBudgetEstimate(Creator.PriceEstimate))" Value="@CalculateBudgetEstimate(Creator.PriceEstimate)" Rounded Size="Size.Large" />
                            <MudText>Høj pris</MudText>
                        </MudStack>

                        <MudTooltip Text="Ønsker du at modtage betaling via din CVR-registrerede virksomhed?">
                            <MudText Typo="Typo.caption">Er du CVR registreret?</MudText>
                        </MudTooltip>

                        <MudToggleGroup context="context2" @bind-Value="Creator.StripeAccountType" Color="Color.Primary">
                            <MudToggleItem Value="@("business")">Ja</MudToggleItem>
                            <MudToggleItem Value="@("individual")">Nej</MudToggleItem>
                        </MudToggleGroup>

                        <MudButton OnClick="SaveChanges" Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save">Gem ændringer</MudButton>

                        @if (HasBeenSaved)
                        {
                            <MudPaper Class="pa-4 mud-success">
                                <MudText Class="text-white">Dine ændringer er blevet gemt</MudText>
                            </MudPaper>
                        }
                    </MudStack>
                </MudStack>
            </MudTabPanel>
        }
        else 
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
    </AuthorizeView>
    
    <MudTabPanel Text="Skift kodeord">
        <MudStack Class="w-full" Spacing="0">
            <MudText Typo="Typo.h6">Skift kodeord</MudText>
            <MudDivider Class="mb-2" />

            <MudStack>
                <MudTextField @bind-Value="OldPassword" Label="Dit gamle kodeord" Required />
                <MudTextField @bind-Value="NewPassword" Label="Dit nye kodeord" Required />
                <MudTextField @bind-Value="ConfirmNewPassword" Label="Bekræft nye kodeord" Required />
                <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save">Skift kodeord</MudButton>
            </MudStack>
        </MudStack>
    </MudTabPanel>
</MudTabs>

@code {
    private IEnumerable<Language> _languages = new List<Language>();
    private User User;
    private bool HasBeenSaved = false;

    private Creator Creator;
    private IEnumerable<Language> _selectedLanguages { get; set; } = new HashSet<Language>();

    private string OldPassword = string.Empty;
    private string NewPassword = string.Empty;
    private string ConfirmNewPassword = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string email = auth.User.FindFirst(c => c.Type == ClaimTypes.Email)?.Value!;
        User = await Context.Users
            .Include(x => x.Organization)
            .ThenInclude(x => x.Subscription)
            .SingleOrDefaultAsync(x => x.Email == email);
        _languages = Context.Languages.ToList();

        if (User.Role == UserRole.Creator) 
        {
            Creator = await Context.Creators.Include(x => x.Languages).SingleOrDefaultAsync(x => x.UserId == User.Id);

            if (Creator is not null && Creator.Languages is not null)
                _selectedLanguages = Creator.Languages;
        }
    }

    private void SaveChanges() 
    {
        if (User.Validate()) 
        {
            Context.SaveChangesAsync();
            HasBeenSaved = true;
        }
    }

    private double CalculateBudgetEstimate(long[] array) => array.Count() > 0 ? 100.0 / 700.0 * array[0] : 0;

    private Color GetEstimateBarColor(double value)
    {
        if (value == 0)
            return Color.Default;

        if (value > 0 && value < 40)
            return Color.Success;

        if (value > 40 && value < 66)
            return Color.Warning;

        if (value > 66 && value < 100)
            return Color.Primary;

        return Color.Error;
    }
}