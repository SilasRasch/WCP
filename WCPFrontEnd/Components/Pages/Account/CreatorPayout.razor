@page "/payout"
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Stripe
@using WCPAdminFrontEnd.Services
@using WCPShared.Interfaces
@using WCPShared.Models.Entities.UserModels
@using WCPShared.Services
@inject StripeService StripeService
@inject IWcpDbContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject StripeService StripeService
@attribute [Authorize(Roles = "Creator")]

<MudStack>
    <MudStack Row>
        <MudStack Spacing="0">
            <span class="text-[20px] font-semibold">Udbetaling</span>
            <span class="text-[16px] text-neutral-400">Administrér, planlæg og hold dig opdateret på udbetalinger herfra</span>
        </MudStack>
        <MudSpacer />
    @* <AuthorizeView Roles="Admin">
        <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" AnchorOrigin="Origin.BottomRight">
        </MudMenu>
    </AuthorizeView> *@
    </MudStack>

    <MudStack Row>
        <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
            <MudStack AlignItems="AlignItems.Start" Class="w-full">
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-green-200 flex">
                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.AttachMoney" Class="text-success-700"></MudIcon>
                </MudStack>
                <MudStack Spacing="0" Class="w-full">
                    <MudText Class="text-neutral-400">Total indtjening</MudText>

                    <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        @if (AccountPayouts is not null)
                        {
                            <MudText Typo="Typo.h5">@(AccountPayouts.Sum(x => x.Amount) / 100) DKK</MudText>
                        }
                        else
                        {
                            <MudProgressCircular Class="mt-2" Color="Color.Default" Size="Size.Small" Indeterminate="true" />
                        }
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudPaper>

        <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
            <MudStack AlignItems="AlignItems.Start" Class="w-full">
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-primary-200 flex">
                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.Alarm" Class="text-primary-700"></MudIcon>
                </MudStack>
                <MudStack Spacing="0" Class="w-full">
                    <MudText Class="text-neutral-400">Under udbetaling</MudText>

                    <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        @if (AccountPayouts is not null)
                        {
                            <MudText Typo="Typo.h5">@(AccountPayouts.Where(x => x.Status == "pending").Sum(x => x.Amount) / 100) DKK</MudText>
                        }
                        else
                        {
                            <MudProgressCircular Class="mt-2" Color="Color.Default" Size="Size.Small" Indeterminate="true" />
                        }
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudPaper>
        <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
            <MudStack AlignItems="AlignItems.Start" Class="w-full">
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-violet-200 flex">
                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.CheckCircleOutline" Class="text-violet-700"></MudIcon>
                </MudStack>
                <MudStack Spacing="0" Class="w-full">
                    <MudText Class="text-neutral-400">Total udbetalt</MudText>

                    <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        @if (AccountPayouts is not null)
                        {
                            <MudText Typo="Typo.h5">@(AccountPayouts.Where(x => x.Status == "paid").Sum(x => x.Amount) / 100) DKK</MudText>
                        }
                        else
                        {
                            <MudProgressCircular Class="mt-2" Color="Color.Default" Size="Size.Small" Indeterminate="true" />
                        }
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudPaper>
        <MudPaper Class="pa-4 border-[1px] border-border" Width="25%" Elevation="0">
            <MudStack AlignItems="AlignItems.Start" Class="w-full">
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-blue-200 flex">
                    <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.CalendarMonth" Class="text-blue-700"></MudIcon>
                </MudStack>
                <MudStack Spacing="0" Class="w-full">
                    <MudText Class="text-neutral-400">Udbetalingsplan</MudText>

                    <MudStack Row Class="w-full" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        @if (Account is not null)
                        {
                            @if (Account.Settings.Payouts.Schedule.Interval == "monthly")
                            {
                                <MudText Typo="Typo.h5">Månedlig</MudText>
                            }
                            if (Account.Settings.Payouts.Schedule.Interval == "weekly")
                            {
                                <MudText Typo="Typo.h5">Ugentlig</MudText>
                            }
                            if (Account.Settings.Payouts.Schedule.Interval == "daily")
                            {
                                <MudText Typo="Typo.h5">Daglig</MudText>
                            }
                        }
                        else
                        {
                            <MudProgressCircular Class="mt-2" Color="Color.Default" Size="Size.Small" Indeterminate="true" />
                        }
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudStack>

    <div Class="pa-4 border-warning-300 border bg-orange-100 rounded">
        <MudStack Row AlignItems="AlignItems.Center">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class=" h-[48px] aspect-square rounded-lg bg-warning-200 flex">
                <MudIcon Size="Size.Large" Icon="@Icons.Material.Outlined.Info" Class="text-warning-700"></MudIcon>
            </MudStack>

            <AuthorizeView Policy="IsNotStripeConnected">
                <Authorized>
                    <MudText Class="text-text-600">
                        Det ser ikke ud til at du har gennemgået vores Stripe onboarding... Tryk <a><u>her</u></a> for at komme i gang med det!
                    </MudText>
                </Authorized>
                <NotAuthorized>
                    <MudStack Spacing="0">
                        <MudText Class="text-text-600">* Du kan minimum få udbetalt 20 DKK</MudText>
                        <MudText Class="text-text-600">* Der kan gå op til 7 dage før beløbet ankommer på din konto</MudText>
                    </MudStack>
                </NotAuthorized>
            </AuthorizeView>
        </MudStack>
    </div>

    <AuthorizeView Policy="IsNotStripeConnected">
        <NotAuthorized>
            @if (AccountPayouts is not null)
            {
                <MudPaper Class="pa-4 border-border border" Elevation="0">
                    <MudStack>
                        <MudText Typo="Typo.h6">Betalinger</MudText>

                        <MudTabs Border TabHeaderClass="!bg-white">
                            <MudTabPanel Text="Udbetalinger">
                                <MudDataGrid Items="@AccountPayouts" Elevation="0" HorizontalScrollbar="false">
                                    <Columns>
                                        <PropertyColumn Property="x => x.Created" Title="Dato" Sortable="false" />
                                        <PropertyColumn Context="entity" Property="x => x.Amount" Title="Beløb" Sortable="false">
                                            <CellTemplate>
                                                <MudText>@(entity.Item.Amount / 100.0) @entity.Item.Currency.ToUpper()</MudText>
                                            </CellTemplate>
                                        </PropertyColumn>
                                        <PropertyColumn Context="entity" Property="x => x.Status" Title="Status" Sortable="false">
                                            <CellTemplate>
                                                @if (entity.Item.Status == "paid")
                                                {
                                                    <span Class="bg-success-50 w-fit px-2 text-success-700 border-success-700 border rounded-xl p-1 capitalize font-medium">@entity.Item.Status</span>
                                                }
                                                else
                                                {
                                                    <span Class="bg-warning-50 text-warning-700 border-warning-700 border w-fit px-2 p-1 rounded-xl font-medium capitalize">@entity.Item.Status</span>
                                                }
                                            </CellTemplate>
                                        </PropertyColumn>
                                        <PropertyColumn Context="entity" Property="x => x.ArrivalDate" Title="Forventet ankomst" Sortable="false">
                                            <CellTemplate>@entity.Item.ArrivalDate.ToString("dd-MM-yyyy")</CellTemplate>
                                        </PropertyColumn>
                                    </Columns>
                                    <NoRecordsContent>
                                        Det ser ikke ud til at vi har noget at vise her...
                                    </NoRecordsContent>
                                </MudDataGrid>
                            </MudTabPanel>

                            <MudTabPanel Text="Interne overførsler">
                                <MudDataGrid Items="@Transfers" Elevation="0" HorizontalScrollbar="false">
                                    <Columns>
                                        <PropertyColumn Property="x => x.Created" Title="Dato" Sortable="false" />
                                        <PropertyColumn Context="entity" Property="x => x.Amount" Title="Beløb" Sortable="false">
                                            <CellTemplate>
                                                <span Class="bg-success-50 w-fit px-2 text-success-700 border-success-700 border rounded-xl p-1 capitalize font-medium">@(entity.Item.Amount / 100) @entity.Item.Currency.ToUpper()</span>
                                            </CellTemplate>
                                        </PropertyColumn>
                                        <PropertyColumn Property="x => x.Description" Title="Beskrivelse" Sortable="false" />
                                    </Columns>
                                    <NoRecordsContent>
                                        Det ser ikke ud til at vi har noget at vise her...
                                    </NoRecordsContent>
                                </MudDataGrid>
                            </MudTabPanel>
                        </MudTabs>
                        
                    </MudStack>
                </MudPaper>
            }
        </NotAuthorized>
    </AuthorizeView>
</MudStack>

@code {
    private Creator? Creator;
    private Balance Balance;
    private Account Account;
    private IEnumerable<Transfer> Transfers;

    private IEnumerable<Payout> AccountPayouts;

    private string? StripeAccount;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var creatorId = authState.User.FindFirst(c => c.Type == "CreatorId")?.Value;
        StripeAccount = authState.User.FindFirst(c => c.Type == "StripeAccountId")?.Value;
        Creator = await Context.Creators
            .Include(x => x.User)
            .ThenInclude(x => x.Language)
            .AsSplitQuery()
            .SingleOrDefaultAsync(x => x.Id == Convert.ToInt32(creatorId));

        if (!string.IsNullOrEmpty(StripeAccount)) 
        {
            if (Creator is not null)
                Balance = await StripeService.GetBalance(StripeAccount);

            AccountPayouts = await StripeService.GetAccountPayouts(StripeAccount);
            Account = StripeService.GetAccount(StripeAccount);
            Transfers = await StripeService.GetAccountTransfers(StripeAccount);
        }
    }
}
